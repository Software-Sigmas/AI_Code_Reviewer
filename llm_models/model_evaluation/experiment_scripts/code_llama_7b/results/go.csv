id,name,explanation,code
1,add,"Adds two integers together. Usage: add(5, 3) returns 8.","// Adds two numbers together and returns the sum.
func add(a int, b int) int {
return a + b
}"
2,isPalindrome,"Determines if a string reads the same backward as forward. Usage: isPalindrome(""radar"") returns true.","// Checks if a given string is a palindrome.
func isPalindrome(str string) bool {
reversed := reverse(str)
return str == reversed
}"
3,getFirstElement,"Returns the first element of a string slice and a boolean indicating success. Usage: getFirstElement([]string{""a"", ""b"", ""c""}) returns ""a"", true.","// Gets the first element from a slice if it exists.
func getFirstElement(slice []string) (string, bool) {
if len(slice) > 0 {
return slice[0], true
}
return """", false
}"
4,greet,"Prints a formatted greeting to the console. Usage: greet(""Alice"") prints Hello, Alice!.","// Sends a greeting to the console with a specified name.
func greet(name string) {
fmt.Printf(""Hello, %s!\n"", name)
}"
5,factorial,Calculates the factorial of an integer. Usage: factorial(5) returns 120.,"// Calculates the factorial of a number.
func factorial(n int) int {
if n <= 1 {
return 1
}
return n * factorial(n-1)
}"
6,isEven,Checks if an integer is even. Usage: isEven(4) returns true.,"// Checks if a number is even.
func isEven(num int) bool {
	return num%2 == 0
}"
7,compact,"Removes empty strings from a slice of strings. Usage: compact([]string{""a"", """", ""b""}) returns []string{""a"", ""b""}.","func compact(slice []string) []string {
var compacted []string
for _, str := range slice {
if str != """" {
compacted = append(compacted, str)
}
}
return compacted
}"
8,max,Finds the maximum of two numbers.,"func FindMax(numbers []int) int { max := numbers[0] for _, val := range numbers { if val > max { max = val } } return max }"
9,min,Finds the minimum of two numbers.,"func FindMin(numbers []int) int { min := numbers[0] for _, val := range numbers { if val < min { min = val } } return min }"
10,concatStrings,Concatenates two strings.,"func ConcatStrings(a string, b string) string { return a + b }"
11,arrayLength,Returns the length of an array.,func ArrayLength(array []interface{}) int { return len(array) }
12,isOdd,Checks if a number is odd.,func IsOdd(num int) bool { return num%2 != 0 }
13,reverseArray,Reverses an array.,"func ReverseArray(array []interface{}) []interface{} { for i, j := 0, len(array)-1; i < j; i, j = i+1, j-1 { array[i], array[j] = array[j], array[i] } return array }"
14,capitalize,Capitalizes the first letter of a string.,"func Capitalize(str string) string { if len(str) == 0 { return """" } return strings.ToUpper(str[:1]) + str[1:] }"
15,isDivisibleBy,Checks if a number is divisible by another number.,"func IsDivisibleBy(num int, divisor int) bool { return num%divisor == 0 }"
16,square,Calculates the square of a number.,func Square(num int) int { return num * num }
17,isStringEmpty,Checks if a string is empty.,"func IsStringEmpty(str string) bool { return str == """" }"
18,getLastElement,Retrieves the last element from an array.,"func GetLastElement(array []interface{}) (interface{}, bool) { if len(array) == 0 { return nil, false } return array[len(array)-1], true }"
19,removeElement,Removes an element from an array by index.,"func RemoveElement(array []interface{}, index int) []interface{} { return append(array[:index], array[index+1:]...) }"
20,sumArray,Sums all numbers in an array.,"func SumArray(numbers []int) int { sum := 0 for _, num := range numbers { sum += num } return sum }"
21,isInArray,Checks if an element is present in an array.,"func IsInArray(array []interface{}, element interface{}) bool { for _, el := range array { if el == element { return true } } return false }"
22,squareRoot,Calculates the square root of a number.,func SquareRoot(num float64) float64 { return math.Sqrt(num) }
23,repeatString,Repeats a string a given number of times.,"func RepeatString(str string, count int) string { return strings.Repeat(str, count) }"
24,mergeArrays,Merges two arrays into one.,"func MergeArrays(array1 []interface{}, array2 []interface{}) []interface{} { return append(array1, array2...) }"
25,areArraysEqual,Checks if two arrays are equal (shallow comparison).,"func AreArraysEqual(array1 []interface{}, array2 []interface{}) bool { if len(array1) != len(array2) { return false } for i := range array1 { if array1[i] != array2[i] { return false } } return true }"
26,toggleBoolean,Toggles a boolean value.,func ToggleBoolean(value bool) bool { return !value }
27,generateRandomNumber,Generates a random number between two values.,"func GenerateRandomNumber(min int, max int) int { return rand.Intn(max-min+1) + min }"
28,randomChoice,Picks a random element from an array.,func RandomChoice(array []interface{}) interface{} { return array[rand.Intn(len(array))] }
29,filterTruthy,Filters out falsy values from an array.,"func FilterTruthy(array []interface{}) []interface{} { var result []interface{} for _, value := range array { if value != nil && value != false && value != 0 && value != """" { result = append(result, value) } } return result }"
30,toBoolean,Converts a value to a boolean.,"func ToBoolean(value interface{}) bool { return value != nil && value != false && value != 0 && value != """" }"
31,roundNumber,Rounds a number to the nearest integer.,func RoundNumber(num float64) int { return int(math.Round(num)) }
32,truncateString,Truncates a string to a specified length.,"func TruncateString(str string, length int) string { if length >= len(str) { return str } return str[:length] }"
33,sumByProperty,Sums the values of a specific property in an array of objects.,"func SumByProperty(array []map[string]int, prop string) int { sum := 0 for _, item := range array { sum += item[prop] } return sum }"
34,getRandomInt,Generates a random integer between two values (inclusive).,"func GetRandomInt(min int, max int) int { return rand.Intn(max-min+1) + min }"
35,flattenArray,Flattens a multi-dimensional array into a single-dimensional array.,"func FlattenArray(array [][]interface{}) []interface{} { var result []interface{} for _, subarray := range array { result = append(result, subarray...) } return result }"
36,countOccurrences,Counts the occurrences of a specific value in an array.,"func CountOccurrences(array []interface{}, value interface{}) int { count := 0 for _, item := range array { if item == value { count++ } } return count }"
37,distanceBetweenPoints,Calculates the distance between two points in 2D space.,"func DistanceBetweenPoints(x1, y1, x2, y2 float64) float64 { return math.Sqrt(math.Pow(x2-x1, 2) + math.Pow(y2-y1, 2)) }"
38,shuffleArray,Shuffles the elements of an array randomly.,"func ShuffleArray(array []interface{}) []interface{} { rand.Shuffle(len(array), func(i, j int) { array[i], array[j] = array[j], array[i] }) return array }"
39,isPrime,Checks if a number is a prime number.,func IsPrime(num int) bool { if num <= 1 { return false } for i := 2; i*i <= num; i++ { if num%i == 0 { return false } } return true }
40,deepClone,Creates a deep clone of an object.,// DeepClone is not straightforward in GO without reflection or serialization/deserialization. Use with caution.
41,getRandomElement,Gets a random element from an array.,func GetRandomElement(array []interface{}) interface{} { return array[rand.Intn(len(array))] }
42,toTitleCase,Converts a string to title case (each word capitalized).,func ToTitleCase(str string) string { return strings.Title(str) }
43,isInteger,Checks if the value is an integer.,"func IsInteger(value interface{}) bool { switch value.(type) { case int, int8, int16, int32, int64: return true default: return false } }"
44,chunkArray,Splits an array into chunks of a specified size.,"func ChunkArray(array []interface{}, size int) [][]interface{} { var chunks [][]interface{} for size < len(array) { array, chunks = array[size:], append(chunks, array[0:size:size]) } chunks = append(chunks, array) return chunks }"
45,uniqueElements,Returns a new array with unique elements from the given array.,"func UniqueElements(array []interface{}) []interface{} { keys := make(map[interface{}]bool) list := []interface{}{} for _, entry := range array { if _, value := keys[entry]; !value { keys[entry] = true list = append(list, entry) } } return list }"
46,isObject,Checks if the value is an object.,// Go doesn't have a direct equivalent of isObject like in JavaScript; structs are commonly used for structured data.
47,digitSum,Calculates the sum of digits of a number.,func DigitSum(num int) int { sum := 0 for num != 0 { sum += num % 10 num /= 10 } return sum }
48,capitalizeWords,Capitalizes the first letter of each word in a string.,"func CapitalizeWords(str string) string { words := strings.Fields(str) for index, word := range words { words[index] = strings.ToUpper(word[:1]) + word[1:] } return strings.Join(words, "" "") }"
49,padString,Pads a string with another string until it reaches the desired length.,"func PadString(str string, length int, padWith string) string { for len(str) < length { str = padWith + str } return str }"
50,isValidEmail,Validates an email address format.,func IsValidEmail(email string) bool { re := regexp.MustCompile(^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$) return re.MatchString(email) }