<<<<<<< Updated upstream
{"version":3,"file":"sidebar.js","sources":["../../node_modules/svelte/src/runtime/internal/utils.js","../../node_modules/svelte/src/runtime/internal/dom.js","../../node_modules/svelte/src/runtime/internal/lifecycle.js","../../node_modules/svelte/src/runtime/internal/scheduler.js","../../node_modules/svelte/src/runtime/internal/transitions.js","../../node_modules/svelte/src/runtime/internal/each.js","../../node_modules/svelte/src/runtime/internal/Component.js","../../node_modules/svelte/src/shared/version.js","../../node_modules/svelte/src/runtime/internal/dev.js","../../node_modules/svelte/src/runtime/internal/disclose-version/index.js","../../webviews/components/Sidebar.svelte","../../webviews/pages/sidebar.ts"],"sourcesContent":["/** @returns {void} */\r\nexport function noop() {}\r\n\r\nexport const identity = (x) => x;\r\n\r\n/**\r\n * @template T\r\n * @template S\r\n * @param {T} tar\r\n * @param {S} src\r\n * @returns {T & S}\r\n */\r\nexport function assign(tar, src) {\r\n\t// @ts-ignore\r\n\tfor (const k in src) tar[k] = src[k];\r\n\treturn /** @type {T & S} */ (tar);\r\n}\r\n\r\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\r\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\r\n/**\r\n * @param {any} value\r\n * @returns {value is PromiseLike<any>}\r\n */\r\nexport function is_promise(value) {\r\n\treturn (\r\n\t\t!!value &&\r\n\t\t(typeof value === 'object' || typeof value === 'function') &&\r\n\t\ttypeof (/** @type {any} */ (value).then) === 'function'\r\n\t);\r\n}\r\n\r\n/** @returns {void} */\r\nexport function add_location(element, file, line, column, char) {\r\n\telement.__svelte_meta = {\r\n\t\tloc: { file, line, column, char }\r\n\t};\r\n}\r\n\r\nexport function run(fn) {\r\n\treturn fn();\r\n}\r\n\r\nexport function blank_object() {\r\n\treturn Object.create(null);\r\n}\r\n\r\n/**\r\n * @param {Function[]} fns\r\n * @returns {void}\r\n */\r\nexport function run_all(fns) {\r\n\tfns.forEach(run);\r\n}\r\n\r\n/**\r\n * @param {any} thing\r\n * @returns {thing is Function}\r\n */\r\nexport function is_function(thing) {\r\n\treturn typeof thing === 'function';\r\n}\r\n\r\n/** @returns {boolean} */\r\nexport function safe_not_equal(a, b) {\r\n\treturn a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';\r\n}\r\n\r\nlet src_url_equal_anchor;\r\n\r\n/**\r\n * @param {string} element_src\r\n * @param {string} url\r\n * @returns {boolean}\r\n */\r\nexport function src_url_equal(element_src, url) {\r\n\tif (element_src === url) return true;\r\n\tif (!src_url_equal_anchor) {\r\n\t\tsrc_url_equal_anchor = document.createElement('a');\r\n\t}\r\n\t// This is actually faster than doing URL(..).href\r\n\tsrc_url_equal_anchor.href = url;\r\n\treturn element_src === src_url_equal_anchor.href;\r\n}\r\n\r\n/** @param {string} srcset */\r\nfunction split_srcset(srcset) {\r\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\r\n}\r\n\r\n/**\r\n * @param {HTMLSourceElement | HTMLImageElement} element_srcset\r\n * @param {string | undefined | null} srcset\r\n * @returns {boolean}\r\n */\r\nexport function srcset_url_equal(element_srcset, srcset) {\r\n\tconst element_urls = split_srcset(element_srcset.srcset);\r\n\tconst urls = split_srcset(srcset || '');\r\n\r\n\treturn (\r\n\t\turls.length === element_urls.length &&\r\n\t\turls.every(\r\n\t\t\t([url, width], i) =>\r\n\t\t\t\twidth === element_urls[i][1] &&\r\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\r\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\r\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\r\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\r\n\t\t\t\t// contain relative or absolute URLs.\r\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\r\n\t\t)\r\n\t);\r\n}\r\n\r\n/** @returns {boolean} */\r\nexport function not_equal(a, b) {\r\n\treturn a != a ? b == b : a !== b;\r\n}\r\n\r\n/** @returns {boolean} */\r\nexport function is_empty(obj) {\r\n\treturn Object.keys(obj).length === 0;\r\n}\r\n\r\n/** @returns {void} */\r\nexport function validate_store(store, name) {\r\n\tif (store != null && typeof store.subscribe !== 'function') {\r\n\t\tthrow new Error(`'${name}' is not a store with a 'subscribe' method`);\r\n\t}\r\n}\r\n\r\nexport function subscribe(store, ...callbacks) {\r\n\tif (store == null) {\r\n\t\tfor (const callback of callbacks) {\r\n\t\t\tcallback(undefined);\r\n\t\t}\r\n\t\treturn noop;\r\n\t}\r\n\tconst unsub = store.subscribe(...callbacks);\r\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\r\n}\r\n\r\n/**\r\n * Get the current value from a store by subscribing and immediately unsubscribing.\r\n *\r\n * https://svelte.dev/docs/svelte-store#get\r\n * @template T\r\n * @param {import('../store/public.js').Readable<T>} store\r\n * @returns {T}\r\n */\r\nexport function get_store_value(store) {\r\n\tlet value;\r\n\tsubscribe(store, (_) => (value = _))();\r\n\treturn value;\r\n}\r\n\r\n/** @returns {void} */\r\nexport function component_subscribe(component, store, callback) {\r\n\tcomponent.$$.on_destroy.push(subscribe(store, callback));\r\n}\r\n\r\nexport function create_slot(definition, ctx, $$scope, fn) {\r\n\tif (definition) {\r\n\t\tconst slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\r\n\t\treturn definition[0](slot_ctx);\r\n\t}\r\n}\r\n\r\nfunction get_slot_context(definition, ctx, $$scope, fn) {\r\n\treturn definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;\r\n}\r\n\r\nexport function get_slot_changes(definition, $$scope, dirty, fn) {\r\n\tif (definition[2] && fn) {\r\n\t\tconst lets = definition[2](fn(dirty));\r\n\t\tif ($$scope.dirty === undefined) {\r\n\t\t\treturn lets;\r\n\t\t}\r\n\t\tif (typeof lets === 'object') {\r\n\t\t\tconst merged = [];\r\n\t\t\tconst len = Math.max($$scope.dirty.length, lets.length);\r\n\t\t\tfor (let i = 0; i < len; i += 1) {\r\n\t\t\t\tmerged[i] = $$scope.dirty[i] | lets[i];\r\n\t\t\t}\r\n\t\t\treturn merged;\r\n\t\t}\r\n\t\treturn $$scope.dirty | lets;\r\n\t}\r\n\treturn $$scope.dirty;\r\n}\r\n\r\n/** @returns {void} */\r\nexport function update_slot_base(\r\n\tslot,\r\n\tslot_definition,\r\n\tctx,\r\n\t$$scope,\r\n\tslot_changes,\r\n\tget_slot_context_fn\r\n) {\r\n\tif (slot_changes) {\r\n\t\tconst slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\r\n\t\tslot.p(slot_context, slot_changes);\r\n\t}\r\n}\r\n\r\n/** @returns {void} */\r\nexport function update_slot(\r\n\tslot,\r\n\tslot_definition,\r\n\tctx,\r\n\t$$scope,\r\n\tdirty,\r\n\tget_slot_changes_fn,\r\n\tget_slot_context_fn\r\n) {\r\n\tconst slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\r\n\tupdate_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\r\n}\r\n\r\n/** @returns {any[] | -1} */\r\nexport function get_all_dirty_from_scope($$scope) {\r\n\tif ($$scope.ctx.length > 32) {\r\n\t\tconst dirty = [];\r\n\t\tconst length = $$scope.ctx.length / 32;\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tdirty[i] = -1;\r\n\t\t}\r\n\t\treturn dirty;\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n/** @returns {{}} */\r\nexport function exclude_internal_props(props) {\r\n\tconst result = {};\r\n\tfor (const k in props) if (k[0] !== '$') result[k] = props[k];\r\n\treturn result;\r\n}\r\n\r\n/** @returns {{}} */\r\nexport function compute_rest_props(props, keys) {\r\n\tconst rest = {};\r\n\tkeys = new Set(keys);\r\n\tfor (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];\r\n\treturn rest;\r\n}\r\n\r\n/** @returns {{}} */\r\nexport function compute_slots(slots) {\r\n\tconst result = {};\r\n\tfor (const key in slots) {\r\n\t\tresult[key] = true;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/** @returns {(this: any, ...args: any[]) => void} */\r\nexport function once(fn) {\r\n\tlet ran = false;\r\n\treturn function (...args) {\r\n\t\tif (ran) return;\r\n\t\tran = true;\r\n\t\tfn.call(this, ...args);\r\n\t};\r\n}\r\n\r\nexport function null_to_empty(value) {\r\n\treturn value == null ? '' : value;\r\n}\r\n\r\nexport function set_store_value(store, ret, value) {\r\n\tstore.set(value);\r\n\treturn ret;\r\n}\r\n\r\nexport const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\nexport function action_destroyer(action_result) {\r\n\treturn action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\r\n}\r\n\r\n/** @param {number | string} value\r\n * @returns {[number, string]}\r\n */\r\nexport function split_css_unit(value) {\r\n\tconst split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\r\n\treturn split ? [parseFloat(split[1]), split[2] || 'px'] : [/** @type {number} */ (value), 'px'];\r\n}\r\n\r\nexport const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\r\n","import { contenteditable_truthy_values, has_prop } from './utils.js';\r\n\r\nimport { ResizeObserverSingleton } from './ResizeObserverSingleton.js';\r\n\r\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\r\n// at the end of hydration without touching the remaining nodes.\r\nlet is_hydrating = false;\r\n\r\n/**\r\n * @returns {void}\r\n */\r\nexport function start_hydrating() {\r\n\tis_hydrating = true;\r\n}\r\n\r\n/**\r\n * @returns {void}\r\n */\r\nexport function end_hydrating() {\r\n\tis_hydrating = false;\r\n}\r\n\r\n/**\r\n * @param {number} low\r\n * @param {number} high\r\n * @param {(index: number) => number} key\r\n * @param {number} value\r\n * @returns {number}\r\n */\r\nfunction upper_bound(low, high, key, value) {\r\n\t// Return first index of value larger than input value in the range [low, high)\r\n\twhile (low < high) {\r\n\t\tconst mid = low + ((high - low) >> 1);\r\n\t\tif (key(mid) <= value) {\r\n\t\t\tlow = mid + 1;\r\n\t\t} else {\r\n\t\t\thigh = mid;\r\n\t\t}\r\n\t}\r\n\treturn low;\r\n}\r\n\r\n/**\r\n * @param {NodeEx} target\r\n * @returns {void}\r\n */\r\nfunction init_hydrate(target) {\r\n\tif (target.hydrate_init) return;\r\n\ttarget.hydrate_init = true;\r\n\t// We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\r\n\r\n\tlet children = /** @type {ArrayLike<NodeEx2>} */ (target.childNodes);\r\n\t// If target is <head>, there may be children without claim_order\r\n\tif (target.nodeName === 'HEAD') {\r\n\t\tconst my_children = [];\r\n\t\tfor (let i = 0; i < children.length; i++) {\r\n\t\t\tconst node = children[i];\r\n\t\t\tif (node.claim_order !== undefined) {\r\n\t\t\t\tmy_children.push(node);\r\n\t\t\t}\r\n\t\t}\r\n\t\tchildren = my_children;\r\n\t}\r\n\t/*\r\n\t * Reorder claimed children optimally.\r\n\t * We can reorder claimed children optimally by finding the longest subsequence of\r\n\t * nodes that are already claimed in order and only moving the rest. The longest\r\n\t * subsequence of nodes that are claimed in order can be found by\r\n\t * computing the longest increasing subsequence of .claim_order values.\r\n\t *\r\n\t * This algorithm is optimal in generating the least amount of reorder operations\r\n\t * possible.\r\n\t *\r\n\t * Proof:\r\n\t * We know that, given a set of reordering operations, the nodes that do not move\r\n\t * always form an increasing subsequence, since they do not move among each other\r\n\t * meaning that they must be already ordered among each other. Thus, the maximal\r\n\t * set of nodes that do not move form a longest increasing subsequence.\r\n\t */\r\n\t// Compute longest increasing subsequence\r\n\t// m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\r\n\tconst m = new Int32Array(children.length + 1);\r\n\t// Predecessor indices + 1\r\n\tconst p = new Int32Array(children.length);\r\n\tm[0] = -1;\r\n\tlet longest = 0;\r\n\tfor (let i = 0; i < children.length; i++) {\r\n\t\tconst current = children[i].claim_order;\r\n\t\t// Find the largest subsequence length such that it ends in a value less than our current value\r\n\t\t// upper_bound returns first greater value, so we subtract one\r\n\t\t// with fast path for when we are on the current longest subsequence\r\n\t\tconst seq_len =\r\n\t\t\t(longest > 0 && children[m[longest]].claim_order <= current\r\n\t\t\t\t? longest + 1\r\n\t\t\t\t: upper_bound(1, longest, (idx) => children[m[idx]].claim_order, current)) - 1;\r\n\t\tp[i] = m[seq_len] + 1;\r\n\t\tconst new_len = seq_len + 1;\r\n\t\t// We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\r\n\t\tm[new_len] = i;\r\n\t\tlongest = Math.max(new_len, longest);\r\n\t}\r\n\t// The longest increasing subsequence of nodes (initially reversed)\r\n\r\n\t/**\r\n\t * @type {NodeEx2[]}\r\n\t */\r\n\tconst lis = [];\r\n\t// The rest of the nodes, nodes that will be moved\r\n\r\n\t/**\r\n\t * @type {NodeEx2[]}\r\n\t */\r\n\tconst to_move = [];\r\n\tlet last = children.length - 1;\r\n\tfor (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\r\n\t\tlis.push(children[cur - 1]);\r\n\t\tfor (; last >= cur; last--) {\r\n\t\t\tto_move.push(children[last]);\r\n\t\t}\r\n\t\tlast--;\r\n\t}\r\n\tfor (; last >= 0; last--) {\r\n\t\tto_move.push(children[last]);\r\n\t}\r\n\tlis.reverse();\r\n\t// We sort the nodes being moved to guarantee that their insertion order matches the claim order\r\n\tto_move.sort((a, b) => a.claim_order - b.claim_order);\r\n\t// Finally, we move the nodes\r\n\tfor (let i = 0, j = 0; i < to_move.length; i++) {\r\n\t\twhile (j < lis.length && to_move[i].claim_order >= lis[j].claim_order) {\r\n\t\t\tj++;\r\n\t\t}\r\n\t\tconst anchor = j < lis.length ? lis[j] : null;\r\n\t\ttarget.insertBefore(to_move[i], anchor);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Node} target\r\n * @param {Node} node\r\n * @returns {void}\r\n */\r\nexport function append(target, node) {\r\n\ttarget.appendChild(node);\r\n}\r\n\r\n/**\r\n * @param {Node} target\r\n * @param {string} style_sheet_id\r\n * @param {string} styles\r\n * @returns {void}\r\n */\r\nexport function append_styles(target, style_sheet_id, styles) {\r\n\tconst append_styles_to = get_root_for_style(target);\r\n\tif (!append_styles_to.getElementById(style_sheet_id)) {\r\n\t\tconst style = element('style');\r\n\t\tstyle.id = style_sheet_id;\r\n\t\tstyle.textContent = styles;\r\n\t\tappend_stylesheet(append_styles_to, style);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n * @returns {ShadowRoot | Document}\r\n */\r\nexport function get_root_for_style(node) {\r\n\tif (!node) return document;\r\n\tconst root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\r\n\tif (root && /** @type {ShadowRoot} */ (root).host) {\r\n\t\treturn /** @type {ShadowRoot} */ (root);\r\n\t}\r\n\treturn node.ownerDocument;\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n * @returns {CSSStyleSheet}\r\n */\r\nexport function append_empty_stylesheet(node) {\r\n\tconst style_element = element('style');\r\n\t// For transitions to work without 'style-src: unsafe-inline' Content Security Policy,\r\n\t// these empty tags need to be allowed with a hash as a workaround until we move to the Web Animations API.\r\n\t// Using the hash for the empty string (for an empty tag) works in all browsers except Safari.\r\n\t// So as a workaround for the workaround, when we append empty style tags we set their content to /* empty */.\r\n\t// The hash 'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=' will then work even in Safari.\r\n\tstyle_element.textContent = '/* empty */';\r\n\tappend_stylesheet(get_root_for_style(node), style_element);\r\n\treturn style_element.sheet;\r\n}\r\n\r\n/**\r\n * @param {ShadowRoot | Document} node\r\n * @param {HTMLStyleElement} style\r\n * @returns {CSSStyleSheet}\r\n */\r\nfunction append_stylesheet(node, style) {\r\n\tappend(/** @type {Document} */ (node).head || node, style);\r\n\treturn style.sheet;\r\n}\r\n\r\n/**\r\n * @param {NodeEx} target\r\n * @param {NodeEx} node\r\n * @returns {void}\r\n */\r\nexport function append_hydration(target, node) {\r\n\tif (is_hydrating) {\r\n\t\tinit_hydrate(target);\r\n\t\tif (\r\n\t\t\ttarget.actual_end_child === undefined ||\r\n\t\t\t(target.actual_end_child !== null && target.actual_end_child.parentNode !== target)\r\n\t\t) {\r\n\t\t\ttarget.actual_end_child = target.firstChild;\r\n\t\t}\r\n\t\t// Skip nodes of undefined ordering\r\n\t\twhile (target.actual_end_child !== null && target.actual_end_child.claim_order === undefined) {\r\n\t\t\ttarget.actual_end_child = target.actual_end_child.nextSibling;\r\n\t\t}\r\n\t\tif (node !== target.actual_end_child) {\r\n\t\t\t// We only insert if the ordering of this node should be modified or the parent node is not target\r\n\t\t\tif (node.claim_order !== undefined || node.parentNode !== target) {\r\n\t\t\t\ttarget.insertBefore(node, target.actual_end_child);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttarget.actual_end_child = node.nextSibling;\r\n\t\t}\r\n\t} else if (node.parentNode !== target || node.nextSibling !== null) {\r\n\t\ttarget.appendChild(node);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Node} target\r\n * @param {Node} node\r\n * @param {Node} [anchor]\r\n * @returns {void}\r\n */\r\nexport function insert(target, node, anchor) {\r\n\ttarget.insertBefore(node, anchor || null);\r\n}\r\n\r\n/**\r\n * @param {NodeEx} target\r\n * @param {NodeEx} node\r\n * @param {NodeEx} [anchor]\r\n * @returns {void}\r\n */\r\nexport function insert_hydration(target, node, anchor) {\r\n\tif (is_hydrating && !anchor) {\r\n\t\tappend_hydration(target, node);\r\n\t} else if (node.parentNode !== target || node.nextSibling != anchor) {\r\n\t\ttarget.insertBefore(node, anchor || null);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n * @returns {void}\r\n */\r\nexport function detach(node) {\r\n\tif (node.parentNode) {\r\n\t\tnode.parentNode.removeChild(node);\r\n\t}\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function destroy_each(iterations, detaching) {\r\n\tfor (let i = 0; i < iterations.length; i += 1) {\r\n\t\tif (iterations[i]) iterations[i].d(detaching);\r\n\t}\r\n}\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} K\r\n * @param {K} name\r\n * @returns {HTMLElementTagNameMap[K]}\r\n */\r\nexport function element(name) {\r\n\treturn document.createElement(name);\r\n}\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} K\r\n * @param {K} name\r\n * @param {string} is\r\n * @returns {HTMLElementTagNameMap[K]}\r\n */\r\nexport function element_is(name, is) {\r\n\treturn document.createElement(name, { is });\r\n}\r\n\r\n/**\r\n * @template T\r\n * @template {keyof T} K\r\n * @param {T} obj\r\n * @param {K[]} exclude\r\n * @returns {Pick<T, Exclude<keyof T, K>>}\r\n */\r\nexport function object_without_properties(obj, exclude) {\r\n\tconst target = /** @type {Pick<T, Exclude<keyof T, K>>} */ ({});\r\n\tfor (const k in obj) {\r\n\t\tif (\r\n\t\t\thas_prop(obj, k) &&\r\n\t\t\t// @ts-ignore\r\n\t\t\texclude.indexOf(k) === -1\r\n\t\t) {\r\n\t\t\t// @ts-ignore\r\n\t\t\ttarget[k] = obj[k];\r\n\t\t}\r\n\t}\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * @template {keyof SVGElementTagNameMap} K\r\n * @param {K} name\r\n * @returns {SVGElement}\r\n */\r\nexport function svg_element(name) {\r\n\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\r\n}\r\n\r\n/**\r\n * @param {string} data\r\n * @returns {Text}\r\n */\r\nexport function text(data) {\r\n\treturn document.createTextNode(data);\r\n}\r\n\r\n/**\r\n * @returns {Text} */\r\nexport function space() {\r\n\treturn text(' ');\r\n}\r\n\r\n/**\r\n * @returns {Text} */\r\nexport function empty() {\r\n\treturn text('');\r\n}\r\n\r\n/**\r\n * @param {string} content\r\n * @returns {Comment}\r\n */\r\nexport function comment(content) {\r\n\treturn document.createComment(content);\r\n}\r\n\r\n/**\r\n * @param {EventTarget} node\r\n * @param {string} event\r\n * @param {EventListenerOrEventListenerObject} handler\r\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\r\n * @returns {() => void}\r\n */\r\nexport function listen(node, event, handler, options) {\r\n\tnode.addEventListener(event, handler, options);\r\n\treturn () => node.removeEventListener(event, handler, options);\r\n}\r\n\r\n/**\r\n * @returns {(event: any) => any} */\r\nexport function prevent_default(fn) {\r\n\treturn function (event) {\r\n\t\tevent.preventDefault();\r\n\t\t// @ts-ignore\r\n\t\treturn fn.call(this, event);\r\n\t};\r\n}\r\n\r\n/**\r\n * @returns {(event: any) => any} */\r\nexport function stop_propagation(fn) {\r\n\treturn function (event) {\r\n\t\tevent.stopPropagation();\r\n\t\t// @ts-ignore\r\n\t\treturn fn.call(this, event);\r\n\t};\r\n}\r\n\r\n/**\r\n * @returns {(event: any) => any} */\r\nexport function stop_immediate_propagation(fn) {\r\n\treturn function (event) {\r\n\t\tevent.stopImmediatePropagation();\r\n\t\t// @ts-ignore\r\n\t\treturn fn.call(this, event);\r\n\t};\r\n}\r\n\r\n/**\r\n * @returns {(event: any) => void} */\r\nexport function self(fn) {\r\n\treturn function (event) {\r\n\t\t// @ts-ignore\r\n\t\tif (event.target === this) fn.call(this, event);\r\n\t};\r\n}\r\n\r\n/**\r\n * @returns {(event: any) => void} */\r\nexport function trusted(fn) {\r\n\treturn function (event) {\r\n\t\t// @ts-ignore\r\n\t\tif (event.isTrusted) fn.call(this, event);\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {Element} node\r\n * @param {string} attribute\r\n * @param {string} [value]\r\n * @returns {void}\r\n */\r\nexport function attr(node, attribute, value) {\r\n\tif (value == null) node.removeAttribute(attribute);\r\n\telse if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);\r\n}\r\n/**\r\n * List of attributes that should always be set through the attr method,\r\n * because updating them through the property setter doesn't work reliably.\r\n * In the example of `width`/`height`, the problem is that the setter only\r\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\r\n * If this list becomes too big, rethink this approach.\r\n */\r\nconst always_set_through_set_attribute = ['width', 'height'];\r\n\r\n/**\r\n * @param {Element & ElementCSSInlineStyle} node\r\n * @param {{ [x: string]: string }} attributes\r\n * @returns {void}\r\n */\r\nexport function set_attributes(node, attributes) {\r\n\t// @ts-ignore\r\n\tconst descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\r\n\tfor (const key in attributes) {\r\n\t\tif (attributes[key] == null) {\r\n\t\t\tnode.removeAttribute(key);\r\n\t\t} else if (key === 'style') {\r\n\t\t\tnode.style.cssText = attributes[key];\r\n\t\t} else if (key === '__value') {\r\n\t\t\t/** @type {any} */ (node).value = node[key] = attributes[key];\r\n\t\t} else if (\r\n\t\t\tdescriptors[key] &&\r\n\t\t\tdescriptors[key].set &&\r\n\t\t\talways_set_through_set_attribute.indexOf(key) === -1\r\n\t\t) {\r\n\t\t\tnode[key] = attributes[key];\r\n\t\t} else {\r\n\t\t\tattr(node, key, attributes[key]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Element & ElementCSSInlineStyle} node\r\n * @param {{ [x: string]: string }} attributes\r\n * @returns {void}\r\n */\r\nexport function set_svg_attributes(node, attributes) {\r\n\tfor (const key in attributes) {\r\n\t\tattr(node, key, attributes[key]);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Record<string, unknown>} data_map\r\n * @returns {void}\r\n */\r\nexport function set_custom_element_data_map(node, data_map) {\r\n\tObject.keys(data_map).forEach((key) => {\r\n\t\tset_custom_element_data(node, key, data_map[key]);\r\n\t});\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function set_custom_element_data(node, prop, value) {\r\n\tconst lower = prop.toLowerCase(); // for backwards compatibility with existing behavior we do lowercase first\r\n\tif (lower in node) {\r\n\t\tnode[lower] = typeof node[lower] === 'boolean' && value === '' ? true : value;\r\n\t} else if (prop in node) {\r\n\t\tnode[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\r\n\t} else {\r\n\t\tattr(node, prop, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {string} tag\r\n */\r\nexport function set_dynamic_element_data(tag) {\r\n\treturn /-/.test(tag) ? set_custom_element_data_map : set_attributes;\r\n}\r\n\r\n/**\r\n * @returns {void}\r\n */\r\nexport function xlink_attr(node, attribute, value) {\r\n\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} node\r\n * @returns {string}\r\n */\r\nexport function get_svelte_dataset(node) {\r\n\treturn node.dataset.svelteH;\r\n}\r\n\r\n/**\r\n * @returns {unknown[]} */\r\nexport function get_binding_group_value(group, __value, checked) {\r\n\tconst value = new Set();\r\n\tfor (let i = 0; i < group.length; i += 1) {\r\n\t\tif (group[i].checked) value.add(group[i].__value);\r\n\t}\r\n\tif (!checked) {\r\n\t\tvalue.delete(__value);\r\n\t}\r\n\treturn Array.from(value);\r\n}\r\n\r\n/**\r\n * @param {HTMLInputElement[]} group\r\n * @returns {{ p(...inputs: HTMLInputElement[]): void; r(): void; }}\r\n */\r\nexport function init_binding_group(group) {\r\n\t/**\r\n\t * @type {HTMLInputElement[]} */\r\n\tlet _inputs;\r\n\treturn {\r\n\t\t/* push */ p(...inputs) {\r\n\t\t\t_inputs = inputs;\r\n\t\t\t_inputs.forEach((input) => group.push(input));\r\n\t\t},\r\n\t\t/* remove */ r() {\r\n\t\t\t_inputs.forEach((input) => group.splice(group.indexOf(input), 1));\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {number[]} indexes\r\n * @returns {{ u(new_indexes: number[]): void; p(...inputs: HTMLInputElement[]): void; r: () => void; }}\r\n */\r\nexport function init_binding_group_dynamic(group, indexes) {\r\n\t/**\r\n\t * @type {HTMLInputElement[]} */\r\n\tlet _group = get_binding_group(group);\r\n\r\n\t/**\r\n\t * @type {HTMLInputElement[]} */\r\n\tlet _inputs;\r\n\r\n\tfunction get_binding_group(group) {\r\n\t\tfor (let i = 0; i < indexes.length; i++) {\r\n\t\t\tgroup = group[indexes[i]] = group[indexes[i]] || [];\r\n\t\t}\r\n\t\treturn group;\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\tfunction push() {\r\n\t\t_inputs.forEach((input) => _group.push(input));\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\tfunction remove() {\r\n\t\t_inputs.forEach((input) => _group.splice(_group.indexOf(input), 1));\r\n\t}\r\n\treturn {\r\n\t\t/* update */ u(new_indexes) {\r\n\t\t\tindexes = new_indexes;\r\n\t\t\tconst new_group = get_binding_group(group);\r\n\t\t\tif (new_group !== _group) {\r\n\t\t\t\tremove();\r\n\t\t\t\t_group = new_group;\r\n\t\t\t\tpush();\r\n\t\t\t}\r\n\t\t},\r\n\t\t/* push */ p(...inputs) {\r\n\t\t\t_inputs = inputs;\r\n\t\t\tpush();\r\n\t\t},\r\n\t\t/* remove */ r: remove\r\n\t};\r\n}\r\n\r\n/** @returns {number} */\r\nexport function to_number(value) {\r\n\treturn value === '' ? null : +value;\r\n}\r\n\r\n/** @returns {any[]} */\r\nexport function time_ranges_to_array(ranges) {\r\n\tconst array = [];\r\n\tfor (let i = 0; i < ranges.length; i += 1) {\r\n\t\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n/**\r\n * @param {Element} element\r\n * @returns {ChildNode[]}\r\n */\r\nexport function children(element) {\r\n\treturn Array.from(element.childNodes);\r\n}\r\n\r\n/**\r\n * @param {ChildNodeArray} nodes\r\n * @returns {void}\r\n */\r\nfunction init_claim_info(nodes) {\r\n\tif (nodes.claim_info === undefined) {\r\n\t\tnodes.claim_info = { last_index: 0, total_claimed: 0 };\r\n\t}\r\n}\r\n\r\n/**\r\n * @template {ChildNodeEx} R\r\n * @param {ChildNodeArray} nodes\r\n * @param {(node: ChildNodeEx) => node is R} predicate\r\n * @param {(node: ChildNodeEx) => ChildNodeEx | undefined} process_node\r\n * @param {() => R} create_node\r\n * @param {boolean} dont_update_last_index\r\n * @returns {R}\r\n */\r\nfunction claim_node(nodes, predicate, process_node, create_node, dont_update_last_index = false) {\r\n\t// Try to find nodes in an order such that we lengthen the longest increasing subsequence\r\n\tinit_claim_info(nodes);\r\n\tconst result_node = (() => {\r\n\t\t// We first try to find an element after the previous one\r\n\t\tfor (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\r\n\t\t\tconst node = nodes[i];\r\n\t\t\tif (predicate(node)) {\r\n\t\t\t\tconst replacement = process_node(node);\r\n\t\t\t\tif (replacement === undefined) {\r\n\t\t\t\t\tnodes.splice(i, 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnodes[i] = replacement;\r\n\t\t\t\t}\r\n\t\t\t\tif (!dont_update_last_index) {\r\n\t\t\t\t\tnodes.claim_info.last_index = i;\r\n\t\t\t\t}\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Otherwise, we try to find one before\r\n\t\t// We iterate in reverse so that we don't go too far back\r\n\t\tfor (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\r\n\t\t\tconst node = nodes[i];\r\n\t\t\tif (predicate(node)) {\r\n\t\t\t\tconst replacement = process_node(node);\r\n\t\t\t\tif (replacement === undefined) {\r\n\t\t\t\t\tnodes.splice(i, 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnodes[i] = replacement;\r\n\t\t\t\t}\r\n\t\t\t\tif (!dont_update_last_index) {\r\n\t\t\t\t\tnodes.claim_info.last_index = i;\r\n\t\t\t\t} else if (replacement === undefined) {\r\n\t\t\t\t\t// Since we spliced before the last_index, we decrease it\r\n\t\t\t\t\tnodes.claim_info.last_index--;\r\n\t\t\t\t}\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If we can't find any matching node, we create a new one\r\n\t\treturn create_node();\r\n\t})();\r\n\tresult_node.claim_order = nodes.claim_info.total_claimed;\r\n\tnodes.claim_info.total_claimed += 1;\r\n\treturn result_node;\r\n}\r\n\r\n/**\r\n * @param {ChildNodeArray} nodes\r\n * @param {string} name\r\n * @param {{ [key: string]: boolean }} attributes\r\n * @param {(name: string) => Element | SVGElement} create_element\r\n * @returns {Element | SVGElement}\r\n */\r\nfunction claim_element_base(nodes, name, attributes, create_element) {\r\n\treturn claim_node(\r\n\t\tnodes,\r\n\t\t/** @returns {node is Element | SVGElement} */\r\n\t\t(node) => node.nodeName === name,\r\n\t\t/** @param {Element} node */\r\n\t\t(node) => {\r\n\t\t\tconst remove = [];\r\n\t\t\tfor (let j = 0; j < node.attributes.length; j++) {\r\n\t\t\t\tconst attribute = node.attributes[j];\r\n\t\t\t\tif (!attributes[attribute.name]) {\r\n\t\t\t\t\tremove.push(attribute.name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tremove.forEach((v) => node.removeAttribute(v));\r\n\t\t\treturn undefined;\r\n\t\t},\r\n\t\t() => create_element(name)\r\n\t);\r\n}\r\n\r\n/**\r\n * @param {ChildNodeArray} nodes\r\n * @param {string} name\r\n * @param {{ [key: string]: boolean }} attributes\r\n * @returns {Element | SVGElement}\r\n */\r\nexport function claim_element(nodes, name, attributes) {\r\n\treturn claim_element_base(nodes, name, attributes, element);\r\n}\r\n\r\n/**\r\n * @param {ChildNodeArray} nodes\r\n * @param {string} name\r\n * @param {{ [key: string]: boolean }} attributes\r\n * @returns {Element | SVGElement}\r\n */\r\nexport function claim_svg_element(nodes, name, attributes) {\r\n\treturn claim_element_base(nodes, name, attributes, svg_element);\r\n}\r\n\r\n/**\r\n * @param {ChildNodeArray} nodes\r\n * @returns {Text}\r\n */\r\nexport function claim_text(nodes, data) {\r\n\treturn claim_node(\r\n\t\tnodes,\r\n\t\t/** @returns {node is Text} */\r\n\t\t(node) => node.nodeType === 3,\r\n\t\t/** @param {Text} node */\r\n\t\t(node) => {\r\n\t\t\tconst data_str = '' + data;\r\n\t\t\tif (node.data.startsWith(data_str)) {\r\n\t\t\t\tif (node.data.length !== data_str.length) {\r\n\t\t\t\t\treturn node.splitText(data_str.length);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnode.data = data_str;\r\n\t\t\t}\r\n\t\t},\r\n\t\t() => text(data),\r\n\t\ttrue // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\r\n\t);\r\n}\r\n\r\n/**\r\n * @returns {Text} */\r\nexport function claim_space(nodes) {\r\n\treturn claim_text(nodes, ' ');\r\n}\r\n\r\n/**\r\n * @param {ChildNodeArray} nodes\r\n * @returns {Comment}\r\n */\r\nexport function claim_comment(nodes, data) {\r\n\treturn claim_node(\r\n\t\tnodes,\r\n\t\t/** @returns {node is Comment} */\r\n\t\t(node) => node.nodeType === 8,\r\n\t\t/** @param {Comment} node */\r\n\t\t(node) => {\r\n\t\t\tnode.data = '' + data;\r\n\t\t\treturn undefined;\r\n\t\t},\r\n\t\t() => comment(data),\r\n\t\ttrue\r\n\t);\r\n}\r\n\r\nfunction get_comment_idx(nodes, text, start) {\r\n\tfor (let i = start; i < nodes.length; i += 1) {\r\n\t\tconst node = nodes[i];\r\n\t\tif (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * @param {boolean} is_svg\r\n * @returns {HtmlTagHydration}\r\n */\r\nexport function claim_html_tag(nodes, is_svg) {\r\n\t// find html opening tag\r\n\tconst start_index = get_comment_idx(nodes, 'HTML_TAG_START', 0);\r\n\tconst end_index = get_comment_idx(nodes, 'HTML_TAG_END', start_index + 1);\r\n\tif (start_index === -1 || end_index === -1) {\r\n\t\treturn new HtmlTagHydration(is_svg);\r\n\t}\r\n\r\n\tinit_claim_info(nodes);\r\n\tconst html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\r\n\tdetach(html_tag_nodes[0]);\r\n\tdetach(html_tag_nodes[html_tag_nodes.length - 1]);\r\n\tconst claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\r\n\tif (claimed_nodes.length === 0) {\r\n\t\treturn new HtmlTagHydration(is_svg);\r\n\t}\r\n\tfor (const n of claimed_nodes) {\r\n\t\tn.claim_order = nodes.claim_info.total_claimed;\r\n\t\tnodes.claim_info.total_claimed += 1;\r\n\t}\r\n\treturn new HtmlTagHydration(is_svg, claimed_nodes);\r\n}\r\n\r\n/**\r\n * @param {Text} text\r\n * @param {unknown} data\r\n * @returns {void}\r\n */\r\nexport function set_data(text, data) {\r\n\tdata = '' + data;\r\n\tif (text.data === data) return;\r\n\ttext.data = /** @type {string} */ (data);\r\n}\r\n\r\n/**\r\n * @param {Text} text\r\n * @param {unknown} data\r\n * @returns {void}\r\n */\r\nexport function set_data_contenteditable(text, data) {\r\n\tdata = '' + data;\r\n\tif (text.wholeText === data) return;\r\n\ttext.data = /** @type {string} */ (data);\r\n}\r\n\r\n/**\r\n * @param {Text} text\r\n * @param {unknown} data\r\n * @param {string} attr_value\r\n * @returns {void}\r\n */\r\nexport function set_data_maybe_contenteditable(text, data, attr_value) {\r\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\r\n\t\tset_data_contenteditable(text, data);\r\n\t} else {\r\n\t\tset_data(text, data);\r\n\t}\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function set_input_value(input, value) {\r\n\tinput.value = value == null ? '' : value;\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function set_input_type(input, type) {\r\n\ttry {\r\n\t\tinput.type = type;\r\n\t} catch (e) {\r\n\t\t// do nothing\r\n\t}\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function set_style(node, key, value, important) {\r\n\tif (value == null) {\r\n\t\tnode.style.removeProperty(key);\r\n\t} else {\r\n\t\tnode.style.setProperty(key, value, important ? 'important' : '');\r\n\t}\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function select_option(select, value, mounting) {\r\n\tfor (let i = 0; i < select.options.length; i += 1) {\r\n\t\tconst option = select.options[i];\r\n\t\tif (option.__value === value) {\r\n\t\t\toption.selected = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (!mounting || value !== undefined) {\r\n\t\tselect.selectedIndex = -1; // no option should be selected\r\n\t}\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function select_options(select, value) {\r\n\tfor (let i = 0; i < select.options.length; i += 1) {\r\n\t\tconst option = select.options[i];\r\n\t\toption.selected = ~value.indexOf(option.__value);\r\n\t}\r\n}\r\n\r\nexport function select_value(select) {\r\n\tconst selected_option = select.querySelector(':checked');\r\n\treturn selected_option && selected_option.__value;\r\n}\r\n\r\nexport function select_multiple_value(select) {\r\n\treturn [].map.call(select.querySelectorAll(':checked'), (option) => option.__value);\r\n}\r\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\r\n// so we cache the result instead\r\n\r\n/**\r\n * @type {boolean} */\r\nlet crossorigin;\r\n\r\n/**\r\n * @returns {boolean} */\r\nexport function is_crossorigin() {\r\n\tif (crossorigin === undefined) {\r\n\t\tcrossorigin = false;\r\n\t\ttry {\r\n\t\t\tif (typeof window !== 'undefined' && window.parent) {\r\n\t\t\t\tvoid window.parent.document;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tcrossorigin = true;\r\n\t\t}\r\n\t}\r\n\treturn crossorigin;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} node\r\n * @param {() => void} fn\r\n * @returns {() => void}\r\n */\r\nexport function add_iframe_resize_listener(node, fn) {\r\n\tconst computed_style = getComputedStyle(node);\r\n\tif (computed_style.position === 'static') {\r\n\t\tnode.style.position = 'relative';\r\n\t}\r\n\tconst iframe = element('iframe');\r\n\tiframe.setAttribute(\r\n\t\t'style',\r\n\t\t'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\r\n\t\t\t'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;'\r\n\t);\r\n\tiframe.setAttribute('aria-hidden', 'true');\r\n\tiframe.tabIndex = -1;\r\n\tconst crossorigin = is_crossorigin();\r\n\r\n\t/**\r\n\t * @type {() => void}\r\n\t */\r\n\tlet unsubscribe;\r\n\tif (crossorigin) {\r\n\t\tiframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\r\n\t\tunsubscribe = listen(\r\n\t\t\twindow,\r\n\t\t\t'message',\r\n\t\t\t/** @param {MessageEvent} event */ (event) => {\r\n\t\t\t\tif (event.source === iframe.contentWindow) fn();\r\n\t\t\t}\r\n\t\t);\r\n\t} else {\r\n\t\tiframe.src = 'about:blank';\r\n\t\tiframe.onload = () => {\r\n\t\t\tunsubscribe = listen(iframe.contentWindow, 'resize', fn);\r\n\t\t\t// make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\r\n\t\t\t// see https://github.com/sveltejs/svelte/issues/4233\r\n\t\t\tfn();\r\n\t\t};\r\n\t}\r\n\tappend(node, iframe);\r\n\treturn () => {\r\n\t\tif (crossorigin) {\r\n\t\t\tunsubscribe();\r\n\t\t} else if (unsubscribe && iframe.contentWindow) {\r\n\t\t\tunsubscribe();\r\n\t\t}\r\n\t\tdetach(iframe);\r\n\t};\r\n}\r\nexport const resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({\r\n\tbox: 'content-box'\r\n});\r\nexport const resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({\r\n\tbox: 'border-box'\r\n});\r\nexport const resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton(\r\n\t{ box: 'device-pixel-content-box' }\r\n);\r\nexport { ResizeObserverSingleton };\r\n\r\n/**\r\n * @returns {void} */\r\nexport function toggle_class(element, name, toggle) {\r\n\t// The `!!` is required because an `undefined` flag means flipping the current state.\r\n\telement.classList.toggle(name, !!toggle);\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {string} type\r\n * @param {T} [detail]\r\n * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]\r\n * @returns {CustomEvent<T>}\r\n */\r\nexport function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\r\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\r\n}\r\n\r\n/**\r\n * @param {string} selector\r\n * @param {HTMLElement} parent\r\n * @returns {ChildNodeArray}\r\n */\r\nexport function query_selector_all(selector, parent = document.body) {\r\n\treturn Array.from(parent.querySelectorAll(selector));\r\n}\r\n\r\n/**\r\n * @param {string} nodeId\r\n * @param {HTMLElement} head\r\n * @returns {any[]}\r\n */\r\nexport function head_selector(nodeId, head) {\r\n\tconst result = [];\r\n\tlet started = 0;\r\n\tfor (const node of head.childNodes) {\r\n\t\tif (node.nodeType === 8 /* comment node */) {\r\n\t\t\tconst comment = node.textContent.trim();\r\n\t\t\tif (comment === `HEAD_${nodeId}_END`) {\r\n\t\t\t\tstarted -= 1;\r\n\t\t\t\tresult.push(node);\r\n\t\t\t} else if (comment === `HEAD_${nodeId}_START`) {\r\n\t\t\t\tstarted += 1;\r\n\t\t\t\tresult.push(node);\r\n\t\t\t}\r\n\t\t} else if (started > 0) {\r\n\t\t\tresult.push(node);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n/** */\r\nexport class HtmlTag {\r\n\t/**\r\n\t * @private\r\n\t * @default false\r\n\t */\r\n\tis_svg = false;\r\n\t/** parent for creating node */\r\n\te = undefined;\r\n\t/** html tag nodes */\r\n\tn = undefined;\r\n\t/** target */\r\n\tt = undefined;\r\n\t/** anchor */\r\n\ta = undefined;\r\n\tconstructor(is_svg = false) {\r\n\t\tthis.is_svg = is_svg;\r\n\t\tthis.e = this.n = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} html\r\n\t * @returns {void}\r\n\t */\r\n\tc(html) {\r\n\t\tthis.h(html);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} html\r\n\t * @param {HTMLElement | SVGElement} target\r\n\t * @param {HTMLElement | SVGElement} anchor\r\n\t * @returns {void}\r\n\t */\r\n\tm(html, target, anchor = null) {\r\n\t\tif (!this.e) {\r\n\t\t\tif (this.is_svg)\r\n\t\t\t\tthis.e = svg_element(/** @type {keyof SVGElementTagNameMap} */ (target.nodeName));\r\n\t\t\t/** #7364  target for <template> may be provided as #document-fragment(11) */ else\r\n\t\t\t\tthis.e = element(\r\n\t\t\t\t\t/** @type {keyof HTMLElementTagNameMap} */ (\r\n\t\t\t\t\t\ttarget.nodeType === 11 ? 'TEMPLATE' : target.nodeName\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\tthis.t =\r\n\t\t\t\ttarget.tagName !== 'TEMPLATE'\r\n\t\t\t\t\t? target\r\n\t\t\t\t\t: /** @type {HTMLTemplateElement} */ (target).content;\r\n\t\t\tthis.c(html);\r\n\t\t}\r\n\t\tthis.i(anchor);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} html\r\n\t * @returns {void}\r\n\t */\r\n\th(html) {\r\n\t\tthis.e.innerHTML = html;\r\n\t\tthis.n = Array.from(\r\n\t\t\tthis.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\ti(anchor) {\r\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\r\n\t\t\tinsert(this.t, this.n[i], anchor);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} html\r\n\t * @returns {void}\r\n\t */\r\n\tp(html) {\r\n\t\tthis.d();\r\n\t\tthis.h(html);\r\n\t\tthis.i(this.a);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\td() {\r\n\t\tthis.n.forEach(detach);\r\n\t}\r\n}\r\n\r\nexport class HtmlTagHydration extends HtmlTag {\r\n\t/** @type {Element[]} hydration claimed nodes */\r\n\tl = undefined;\r\n\r\n\tconstructor(is_svg = false, claimed_nodes) {\r\n\t\tsuper(is_svg);\r\n\t\tthis.e = this.n = null;\r\n\t\tthis.l = claimed_nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} html\r\n\t * @returns {void}\r\n\t */\r\n\tc(html) {\r\n\t\tif (this.l) {\r\n\t\t\tthis.n = this.l;\r\n\t\t} else {\r\n\t\t\tsuper.c(html);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\ti(anchor) {\r\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\r\n\t\t\tinsert_hydration(this.t, this.n[i], anchor);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {NamedNodeMap} attributes\r\n * @returns {{}}\r\n */\r\nexport function attribute_to_object(attributes) {\r\n\tconst result = {};\r\n\tfor (const attribute of attributes) {\r\n\t\tresult[attribute.name] = attribute.value;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nconst escaped = {\r\n\t'\"': '&quot;',\r\n\t'&': '&amp;',\r\n\t'<': '&lt;'\r\n};\r\n\r\nconst regex_attribute_characters_to_escape = /[\"&<]/g;\r\n\r\n/**\r\n * Note that the attribute itself should be surrounded in double quotes\r\n * @param {any} attribute\r\n */\r\nfunction escape_attribute(attribute) {\r\n\treturn String(attribute).replace(regex_attribute_characters_to_escape, (match) => escaped[match]);\r\n}\r\n\r\n/**\r\n * @param {Record<string, string>} attributes\r\n */\r\nexport function stringify_spread(attributes) {\r\n\tlet str = ' ';\r\n\tfor (const key in attributes) {\r\n\t\tif (attributes[key] != null) {\r\n\t\t\tstr += `${key}=\"${escape_attribute(attributes[key])}\" `;\r\n\t\t}\r\n\t}\r\n\r\n\treturn str;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} element\r\n * @returns {{}}\r\n */\r\nexport function get_custom_elements_slots(element) {\r\n\tconst result = {};\r\n\telement.childNodes.forEach(\r\n\t\t/** @param {Element} node */ (node) => {\r\n\t\t\tresult[node.slot || 'default'] = true;\r\n\t\t}\r\n\t);\r\n\treturn result;\r\n}\r\n\r\nexport function construct_svelte_component(component, props) {\r\n\treturn new component(props);\r\n}\r\n\r\n/**\r\n * @typedef {Node & {\r\n * \tclaim_order?: number;\r\n * \thydrate_init?: true;\r\n * \tactual_end_child?: NodeEx;\r\n * \tchildNodes: NodeListOf<NodeEx>;\r\n * }} NodeEx\r\n */\r\n\r\n/** @typedef {ChildNode & NodeEx} ChildNodeEx */\r\n\r\n/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */\r\n\r\n/**\r\n * @typedef {ChildNodeEx[] & {\r\n * \tclaim_info?: {\r\n * \t\tlast_index: number;\r\n * \t\ttotal_claimed: number;\r\n * \t};\r\n * }} ChildNodeArray\r\n */\r\n","import { custom_event } from './dom.js';\r\n\r\nexport let current_component;\r\n\r\n/** @returns {void} */\r\nexport function set_current_component(component) {\r\n\tcurrent_component = component;\r\n}\r\n\r\nexport function get_current_component() {\r\n\tif (!current_component) throw new Error('Function called outside component initialization');\r\n\treturn current_component;\r\n}\r\n\r\n/**\r\n * Schedules a callback to run immediately before the component is updated after any state change.\r\n *\r\n * The first time the callback runs will be before the initial `onMount`\r\n *\r\n * https://svelte.dev/docs/svelte#beforeupdate\r\n * @param {() => any} fn\r\n * @returns {void}\r\n */\r\nexport function beforeUpdate(fn) {\r\n\tget_current_component().$$.before_update.push(fn);\r\n}\r\n\r\n/**\r\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\r\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\r\n * it can be called from an external module).\r\n *\r\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\r\n *\r\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\r\n *\r\n * https://svelte.dev/docs/svelte#onmount\r\n * @template T\r\n * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn\r\n * @returns {void}\r\n */\r\nexport function onMount(fn) {\r\n\tget_current_component().$$.on_mount.push(fn);\r\n}\r\n\r\n/**\r\n * Schedules a callback to run immediately after the component has been updated.\r\n *\r\n * The first time the callback runs will be after the initial `onMount`\r\n *\r\n * https://svelte.dev/docs/svelte#afterupdate\r\n * @param {() => any} fn\r\n * @returns {void}\r\n */\r\nexport function afterUpdate(fn) {\r\n\tget_current_component().$$.after_update.push(fn);\r\n}\r\n\r\n/**\r\n * Schedules a callback to run immediately before the component is unmounted.\r\n *\r\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\r\n * only one that runs inside a server-side component.\r\n *\r\n * https://svelte.dev/docs/svelte#ondestroy\r\n * @param {() => any} fn\r\n * @returns {void}\r\n */\r\nexport function onDestroy(fn) {\r\n\tget_current_component().$$.on_destroy.push(fn);\r\n}\r\n\r\n/**\r\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\r\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\r\n *\r\n * Component events created with `createEventDispatcher` create a\r\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\r\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\r\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\r\n * property and can contain any type of data.\r\n *\r\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\r\n * ```ts\r\n * const dispatch = createEventDispatcher<{\r\n *  loaded: never; // does not take a detail argument\r\n *  change: string; // takes a detail argument of type string, which is required\r\n *  optional: number | null; // takes an optional detail argument of type number\r\n * }>();\r\n * ```\r\n *\r\n * https://svelte.dev/docs/svelte#createeventdispatcher\r\n * @template {Record<string, any>} [EventMap=any]\r\n * @returns {import('./public.js').EventDispatcher<EventMap>}\r\n */\r\nexport function createEventDispatcher() {\r\n\tconst component = get_current_component();\r\n\treturn (type, detail, { cancelable = false } = {}) => {\r\n\t\tconst callbacks = component.$$.callbacks[type];\r\n\t\tif (callbacks) {\r\n\t\t\t// TODO are there situations where events could be dispatched\r\n\t\t\t// in a server (non-DOM) environment?\r\n\t\t\tconst event = custom_event(/** @type {string} */ (type), detail, { cancelable });\r\n\t\t\tcallbacks.slice().forEach((fn) => {\r\n\t\t\t\tfn.call(component, event);\r\n\t\t\t});\r\n\t\t\treturn !event.defaultPrevented;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n}\r\n\r\n/**\r\n * Associates an arbitrary `context` object with the current component and the specified `key`\r\n * and returns that object. The context is then available to children of the component\r\n * (including slotted content) with `getContext`.\r\n *\r\n * Like lifecycle functions, this must be called during component initialisation.\r\n *\r\n * https://svelte.dev/docs/svelte#setcontext\r\n * @template T\r\n * @param {any} key\r\n * @param {T} context\r\n * @returns {T}\r\n */\r\nexport function setContext(key, context) {\r\n\tget_current_component().$$.context.set(key, context);\r\n\treturn context;\r\n}\r\n\r\n/**\r\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\r\n * Must be called during component initialisation.\r\n *\r\n * https://svelte.dev/docs/svelte#getcontext\r\n * @template T\r\n * @param {any} key\r\n * @returns {T}\r\n */\r\nexport function getContext(key) {\r\n\treturn get_current_component().$$.context.get(key);\r\n}\r\n\r\n/**\r\n * Retrieves the whole context map that belongs to the closest parent component.\r\n * Must be called during component initialisation. Useful, for example, if you\r\n * programmatically create a component and want to pass the existing context to it.\r\n *\r\n * https://svelte.dev/docs/svelte#getallcontexts\r\n * @template {Map<any, any>} [T=Map<any, any>]\r\n * @returns {T}\r\n */\r\nexport function getAllContexts() {\r\n\treturn get_current_component().$$.context;\r\n}\r\n\r\n/**\r\n * Checks whether a given `key` has been set in the context of a parent component.\r\n * Must be called during component initialisation.\r\n *\r\n * https://svelte.dev/docs/svelte#hascontext\r\n * @param {any} key\r\n * @returns {boolean}\r\n */\r\nexport function hasContext(key) {\r\n\treturn get_current_component().$$.context.has(key);\r\n}\r\n\r\n// TODO figure out if we still want to support\r\n// shorthand events, or if we want to implement\r\n// a real bubbling mechanism\r\n/**\r\n * @param component\r\n * @param event\r\n * @returns {void}\r\n */\r\nexport function bubble(component, event) {\r\n\tconst callbacks = component.$$.callbacks[event.type];\r\n\tif (callbacks) {\r\n\t\t// @ts-ignore\r\n\t\tcallbacks.slice().forEach((fn) => fn.call(this, event));\r\n\t}\r\n}\r\n","import { run_all } from './utils.js';\r\nimport { current_component, set_current_component } from './lifecycle.js';\r\n\r\nexport const dirty_components = [];\r\nexport const intros = { enabled: false };\r\nexport const binding_callbacks = [];\r\n\r\nlet render_callbacks = [];\r\n\r\nconst flush_callbacks = [];\r\n\r\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\r\n\r\nlet update_scheduled = false;\r\n\r\n/** @returns {void} */\r\nexport function schedule_update() {\r\n\tif (!update_scheduled) {\r\n\t\tupdate_scheduled = true;\r\n\t\tresolved_promise.then(flush);\r\n\t}\r\n}\r\n\r\n/** @returns {Promise<void>} */\r\nexport function tick() {\r\n\tschedule_update();\r\n\treturn resolved_promise;\r\n}\r\n\r\n/** @returns {void} */\r\nexport function add_render_callback(fn) {\r\n\trender_callbacks.push(fn);\r\n}\r\n\r\n/** @returns {void} */\r\nexport function add_flush_callback(fn) {\r\n\tflush_callbacks.push(fn);\r\n}\r\n\r\n// flush() calls callbacks in this order:\r\n// 1. All beforeUpdate callbacks, in order: parents before children\r\n// 2. All bind:this callbacks, in reverse order: children before parents.\r\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\r\n//    for afterUpdates called during the initial onMount, which are called in\r\n//    reverse order: children before parents.\r\n// Since callbacks might update component values, which could trigger another\r\n// call to flush(), the following steps guard against this:\r\n// 1. During beforeUpdate, any updated components will be added to the\r\n//    dirty_components array and will cause a reentrant call to flush(). Because\r\n//    the flush index is kept outside the function, the reentrant call will pick\r\n//    up where the earlier call left off and go through all dirty components. The\r\n//    current_component value is saved and restored so that the reentrant call will\r\n//    not interfere with the \"parent\" flush() call.\r\n// 2. bind:this callbacks cannot trigger new flush() calls.\r\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\r\n//    callback called a second time; the seen_callbacks set, outside the flush()\r\n//    function, guarantees this behavior.\r\nconst seen_callbacks = new Set();\r\n\r\nlet flushidx = 0; // Do *not* move this inside the flush() function\r\n\r\n/** @returns {void} */\r\nexport function flush() {\r\n\t// Do not reenter flush while dirty components are updated, as this can\r\n\t// result in an infinite loop. Instead, let the inner flush handle it.\r\n\t// Reentrancy is ok afterwards for bindings etc.\r\n\tif (flushidx !== 0) {\r\n\t\treturn;\r\n\t}\r\n\tconst saved_component = current_component;\r\n\tdo {\r\n\t\t// first, call beforeUpdate functions\r\n\t\t// and update components\r\n\t\ttry {\r\n\t\t\twhile (flushidx < dirty_components.length) {\r\n\t\t\t\tconst component = dirty_components[flushidx];\r\n\t\t\t\tflushidx++;\r\n\t\t\t\tset_current_component(component);\r\n\t\t\t\tupdate(component.$$);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\t// reset dirty state to not end up in a deadlocked state and then rethrow\r\n\t\t\tdirty_components.length = 0;\r\n\t\t\tflushidx = 0;\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t\tset_current_component(null);\r\n\t\tdirty_components.length = 0;\r\n\t\tflushidx = 0;\r\n\t\twhile (binding_callbacks.length) binding_callbacks.pop()();\r\n\t\t// then, once components are updated, call\r\n\t\t// afterUpdate functions. This may cause\r\n\t\t// subsequent updates...\r\n\t\tfor (let i = 0; i < render_callbacks.length; i += 1) {\r\n\t\t\tconst callback = render_callbacks[i];\r\n\t\t\tif (!seen_callbacks.has(callback)) {\r\n\t\t\t\t// ...so guard against infinite loops\r\n\t\t\t\tseen_callbacks.add(callback);\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t}\r\n\t\trender_callbacks.length = 0;\r\n\t} while (dirty_components.length);\r\n\twhile (flush_callbacks.length) {\r\n\t\tflush_callbacks.pop()();\r\n\t}\r\n\tupdate_scheduled = false;\r\n\tseen_callbacks.clear();\r\n\tset_current_component(saved_component);\r\n}\r\n\r\n/** @returns {void} */\r\nfunction update($$) {\r\n\tif ($$.fragment !== null) {\r\n\t\t$$.update();\r\n\t\trun_all($$.before_update);\r\n\t\tconst dirty = $$.dirty;\r\n\t\t$$.dirty = [-1];\r\n\t\t$$.fragment && $$.fragment.p($$.ctx, dirty);\r\n\t\t$$.after_update.forEach(add_render_callback);\r\n\t}\r\n}\r\n\r\n/**\r\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\r\n * @param {Function[]} fns\r\n * @returns {void}\r\n */\r\nexport function flush_render_callbacks(fns) {\r\n\tconst filtered = [];\r\n\tconst targets = [];\r\n\trender_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));\r\n\ttargets.forEach((c) => c());\r\n\trender_callbacks = filtered;\r\n}\r\n","import { identity as linear, is_function, noop, run_all } from './utils.js';\r\nimport { now } from './environment.js';\r\nimport { loop } from './loop.js';\r\nimport { create_rule, delete_rule } from './style_manager.js';\r\nimport { custom_event } from './dom.js';\r\nimport { add_render_callback } from './scheduler.js';\r\n\r\n/**\r\n * @type {Promise<void> | null}\r\n */\r\nlet promise;\r\n\r\n/**\r\n * @returns {Promise<void>}\r\n */\r\nfunction wait() {\r\n\tif (!promise) {\r\n\t\tpromise = Promise.resolve();\r\n\t\tpromise.then(() => {\r\n\t\t\tpromise = null;\r\n\t\t});\r\n\t}\r\n\treturn promise;\r\n}\r\n\r\n/**\r\n * @param {Element} node\r\n * @param {INTRO | OUTRO | boolean} direction\r\n * @param {'start' | 'end'} kind\r\n * @returns {void}\r\n */\r\nfunction dispatch(node, direction, kind) {\r\n\tnode.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\r\n}\r\n\r\nconst outroing = new Set();\r\n\r\n/**\r\n * @type {Outro}\r\n */\r\nlet outros;\r\n\r\n/**\r\n * @returns {void} */\r\nexport function group_outros() {\r\n\toutros = {\r\n\t\tr: 0,\r\n\t\tc: [],\r\n\t\tp: outros // parent group\r\n\t};\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function check_outros() {\r\n\tif (!outros.r) {\r\n\t\trun_all(outros.c);\r\n\t}\r\n\toutros = outros.p;\r\n}\r\n\r\n/**\r\n * @param {import('./private.js').Fragment} block\r\n * @param {0 | 1} [local]\r\n * @returns {void}\r\n */\r\nexport function transition_in(block, local) {\r\n\tif (block && block.i) {\r\n\t\toutroing.delete(block);\r\n\t\tblock.i(local);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {import('./private.js').Fragment} block\r\n * @param {0 | 1} local\r\n * @param {0 | 1} [detach]\r\n * @param {() => void} [callback]\r\n * @returns {void}\r\n */\r\nexport function transition_out(block, local, detach, callback) {\r\n\tif (block && block.o) {\r\n\t\tif (outroing.has(block)) return;\r\n\t\toutroing.add(block);\r\n\t\toutros.c.push(() => {\r\n\t\t\toutroing.delete(block);\r\n\t\t\tif (callback) {\r\n\t\t\t\tif (detach) block.d(1);\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t});\r\n\t\tblock.o(local);\r\n\t} else if (callback) {\r\n\t\tcallback();\r\n\t}\r\n}\r\n\r\n/**\r\n * @type {import('../transition/public.js').TransitionConfig}\r\n */\r\nconst null_transition = { duration: 0 };\r\n\r\n/**\r\n * @param {Element & ElementCSSInlineStyle} node\r\n * @param {TransitionFn} fn\r\n * @param {any} params\r\n * @returns {{ start(): void; invalidate(): void; end(): void; }}\r\n */\r\nexport function create_in_transition(node, fn, params) {\r\n\t/**\r\n\t * @type {TransitionOptions} */\r\n\tconst options = { direction: 'in' };\r\n\tlet config = fn(node, params, options);\r\n\tlet running = false;\r\n\tlet animation_name;\r\n\tlet task;\r\n\tlet uid = 0;\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\tfunction cleanup() {\r\n\t\tif (animation_name) delete_rule(node, animation_name);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\tfunction go() {\r\n\t\tconst {\r\n\t\t\tdelay = 0,\r\n\t\t\tduration = 300,\r\n\t\t\teasing = linear,\r\n\t\t\ttick = noop,\r\n\t\t\tcss\r\n\t\t} = config || null_transition;\r\n\t\tif (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\r\n\t\ttick(0, 1);\r\n\t\tconst start_time = now() + delay;\r\n\t\tconst end_time = start_time + duration;\r\n\t\tif (task) task.abort();\r\n\t\trunning = true;\r\n\t\tadd_render_callback(() => dispatch(node, true, 'start'));\r\n\t\ttask = loop((now) => {\r\n\t\t\tif (running) {\r\n\t\t\t\tif (now >= end_time) {\r\n\t\t\t\t\ttick(1, 0);\r\n\t\t\t\t\tdispatch(node, true, 'end');\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\treturn (running = false);\r\n\t\t\t\t}\r\n\t\t\t\tif (now >= start_time) {\r\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\r\n\t\t\t\t\ttick(t, 1 - t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn running;\r\n\t\t});\r\n\t}\r\n\tlet started = false;\r\n\treturn {\r\n\t\tstart() {\r\n\t\t\tif (started) return;\r\n\t\t\tstarted = true;\r\n\t\t\tdelete_rule(node);\r\n\t\t\tif (is_function(config)) {\r\n\t\t\t\tconfig = config(options);\r\n\t\t\t\twait().then(go);\r\n\t\t\t} else {\r\n\t\t\t\tgo();\r\n\t\t\t}\r\n\t\t},\r\n\t\tinvalidate() {\r\n\t\t\tstarted = false;\r\n\t\t},\r\n\t\tend() {\r\n\t\t\tif (running) {\r\n\t\t\t\tcleanup();\r\n\t\t\t\trunning = false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {Element & ElementCSSInlineStyle} node\r\n * @param {TransitionFn} fn\r\n * @param {any} params\r\n * @returns {{ end(reset: any): void; }}\r\n */\r\nexport function create_out_transition(node, fn, params) {\r\n\t/** @type {TransitionOptions} */\r\n\tconst options = { direction: 'out' };\r\n\tlet config = fn(node, params, options);\r\n\tlet running = true;\r\n\tlet animation_name;\r\n\tconst group = outros;\r\n\tgroup.r += 1;\r\n\t/** @type {boolean} */\r\n\tlet original_inert_value;\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\tfunction go() {\r\n\t\tconst {\r\n\t\t\tdelay = 0,\r\n\t\t\tduration = 300,\r\n\t\t\teasing = linear,\r\n\t\t\ttick = noop,\r\n\t\t\tcss\r\n\t\t} = config || null_transition;\r\n\r\n\t\tif (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\r\n\r\n\t\tconst start_time = now() + delay;\r\n\t\tconst end_time = start_time + duration;\r\n\t\tadd_render_callback(() => dispatch(node, false, 'start'));\r\n\r\n\t\tif ('inert' in node) {\r\n\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\r\n\t\t\tnode.inert = true;\r\n\t\t}\r\n\r\n\t\tloop((now) => {\r\n\t\t\tif (running) {\r\n\t\t\t\tif (now >= end_time) {\r\n\t\t\t\t\ttick(0, 1);\r\n\t\t\t\t\tdispatch(node, false, 'end');\r\n\t\t\t\t\tif (!--group.r) {\r\n\t\t\t\t\t\t// this will result in `end()` being called,\r\n\t\t\t\t\t\t// so we don't need to clean up here\r\n\t\t\t\t\t\trun_all(group.c);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (now >= start_time) {\r\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\r\n\t\t\t\t\ttick(1 - t, t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn running;\r\n\t\t});\r\n\t}\r\n\r\n\tif (is_function(config)) {\r\n\t\twait().then(() => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tconfig = config(options);\r\n\t\t\tgo();\r\n\t\t});\r\n\t} else {\r\n\t\tgo();\r\n\t}\r\n\r\n\treturn {\r\n\t\tend(reset) {\r\n\t\t\tif (reset && 'inert' in node) {\r\n\t\t\t\tnode.inert = original_inert_value;\r\n\t\t\t}\r\n\t\t\tif (reset && config.tick) {\r\n\t\t\t\tconfig.tick(1, 0);\r\n\t\t\t}\r\n\t\t\tif (running) {\r\n\t\t\t\tif (animation_name) delete_rule(node, animation_name);\r\n\t\t\t\trunning = false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {Element & ElementCSSInlineStyle} node\r\n * @param {TransitionFn} fn\r\n * @param {any} params\r\n * @param {boolean} intro\r\n * @returns {{ run(b: 0 | 1): void; end(): void; }}\r\n */\r\nexport function create_bidirectional_transition(node, fn, params, intro) {\r\n\t/**\r\n\t * @type {TransitionOptions} */\r\n\tconst options = { direction: 'both' };\r\n\tlet config = fn(node, params, options);\r\n\tlet t = intro ? 0 : 1;\r\n\r\n\t/**\r\n\t * @type {Program | null} */\r\n\tlet running_program = null;\r\n\r\n\t/**\r\n\t * @type {PendingProgram | null} */\r\n\tlet pending_program = null;\r\n\tlet animation_name = null;\r\n\r\n\t/** @type {boolean} */\r\n\tlet original_inert_value;\r\n\r\n\t/**\r\n\t * @returns {void} */\r\n\tfunction clear_animation() {\r\n\t\tif (animation_name) delete_rule(node, animation_name);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PendingProgram} program\r\n\t * @param {number} duration\r\n\t * @returns {Program}\r\n\t */\r\n\tfunction init(program, duration) {\r\n\t\tconst d = /** @type {Program['d']} */ (program.b - t);\r\n\t\tduration *= Math.abs(d);\r\n\t\treturn {\r\n\t\t\ta: t,\r\n\t\t\tb: program.b,\r\n\t\t\td,\r\n\t\t\tduration,\r\n\t\t\tstart: program.start,\r\n\t\t\tend: program.start + duration,\r\n\t\t\tgroup: program.group\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {INTRO | OUTRO} b\r\n\t * @returns {void}\r\n\t */\r\n\tfunction go(b) {\r\n\t\tconst {\r\n\t\t\tdelay = 0,\r\n\t\t\tduration = 300,\r\n\t\t\teasing = linear,\r\n\t\t\ttick = noop,\r\n\t\t\tcss\r\n\t\t} = config || null_transition;\r\n\r\n\t\t/**\r\n\t\t * @type {PendingProgram} */\r\n\t\tconst program = {\r\n\t\t\tstart: now() + delay,\r\n\t\t\tb\r\n\t\t};\r\n\r\n\t\tif (!b) {\r\n\t\t\t// @ts-ignore todo: improve typings\r\n\t\t\tprogram.group = outros;\r\n\t\t\toutros.r += 1;\r\n\t\t}\r\n\r\n\t\tif ('inert' in node) {\r\n\t\t\tif (b) {\r\n\t\t\t\tif (original_inert_value !== undefined) {\r\n\t\t\t\t\t// aborted/reversed outro — restore previous inert value\r\n\t\t\t\t\tnode.inert = original_inert_value;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\r\n\t\t\t\tnode.inert = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (running_program || pending_program) {\r\n\t\t\tpending_program = program;\r\n\t\t} else {\r\n\t\t\t// if this is an intro, and there's a delay, we need to do\r\n\t\t\t// an initial tick and/or apply CSS animation immediately\r\n\t\t\tif (css) {\r\n\t\t\t\tclear_animation();\r\n\t\t\t\tanimation_name = create_rule(node, t, b, duration, delay, easing, css);\r\n\t\t\t}\r\n\t\t\tif (b) tick(0, 1);\r\n\t\t\trunning_program = init(program, duration);\r\n\t\t\tadd_render_callback(() => dispatch(node, b, 'start'));\r\n\t\t\tloop((now) => {\r\n\t\t\t\tif (pending_program && now > pending_program.start) {\r\n\t\t\t\t\trunning_program = init(pending_program, duration);\r\n\t\t\t\t\tpending_program = null;\r\n\t\t\t\t\tdispatch(node, running_program.b, 'start');\r\n\t\t\t\t\tif (css) {\r\n\t\t\t\t\t\tclear_animation();\r\n\t\t\t\t\t\tanimation_name = create_rule(\r\n\t\t\t\t\t\t\tnode,\r\n\t\t\t\t\t\t\tt,\r\n\t\t\t\t\t\t\trunning_program.b,\r\n\t\t\t\t\t\t\trunning_program.duration,\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\teasing,\r\n\t\t\t\t\t\t\tconfig.css\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (running_program) {\r\n\t\t\t\t\tif (now >= running_program.end) {\r\n\t\t\t\t\t\ttick((t = running_program.b), 1 - t);\r\n\t\t\t\t\t\tdispatch(node, running_program.b, 'end');\r\n\t\t\t\t\t\tif (!pending_program) {\r\n\t\t\t\t\t\t\t// we're done\r\n\t\t\t\t\t\t\tif (running_program.b) {\r\n\t\t\t\t\t\t\t\t// intro — we can tidy up immediately\r\n\t\t\t\t\t\t\t\tclear_animation();\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// outro — needs to be coordinated\r\n\t\t\t\t\t\t\t\tif (!--running_program.group.r) run_all(running_program.group.c);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trunning_program = null;\r\n\t\t\t\t\t} else if (now >= running_program.start) {\r\n\t\t\t\t\t\tconst p = now - running_program.start;\r\n\t\t\t\t\t\tt = running_program.a + running_program.d * easing(p / running_program.duration);\r\n\t\t\t\t\t\ttick(t, 1 - t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn !!(running_program || pending_program);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\trun(b) {\r\n\t\t\tif (is_function(config)) {\r\n\t\t\t\twait().then(() => {\r\n\t\t\t\t\tconst opts = { direction: b ? 'in' : 'out' };\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tconfig = config(opts);\r\n\t\t\t\t\tgo(b);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tgo(b);\r\n\t\t\t}\r\n\t\t},\r\n\t\tend() {\r\n\t\t\tclear_animation();\r\n\t\t\trunning_program = pending_program = null;\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/** @typedef {1} INTRO */\r\n/** @typedef {0} OUTRO */\r\n/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */\r\n/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */\r\n\r\n/**\r\n * @typedef {Object} Outro\r\n * @property {number} r\r\n * @property {Function[]} c\r\n * @property {Object} p\r\n */\r\n\r\n/**\r\n * @typedef {Object} PendingProgram\r\n * @property {number} start\r\n * @property {INTRO|OUTRO} b\r\n * @property {Outro} [group]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Program\r\n * @property {number} a\r\n * @property {INTRO|OUTRO} b\r\n * @property {1|-1} d\r\n * @property {number} duration\r\n * @property {number} start\r\n * @property {number} end\r\n * @property {Outro} [group]\r\n */\r\n","import { transition_in, transition_out } from './transitions.js';\r\nimport { run_all } from './utils.js';\r\n\r\n// general each functions:\r\n\r\nexport function ensure_array_like(array_like_or_iterator) {\r\n\treturn array_like_or_iterator?.length !== undefined\r\n\t\t? array_like_or_iterator\r\n\t\t: Array.from(array_like_or_iterator);\r\n}\r\n\r\n// keyed each functions:\r\n\r\n/** @returns {void} */\r\nexport function destroy_block(block, lookup) {\r\n\tblock.d(1);\r\n\tlookup.delete(block.key);\r\n}\r\n\r\n/** @returns {void} */\r\nexport function outro_and_destroy_block(block, lookup) {\r\n\ttransition_out(block, 1, 1, () => {\r\n\t\tlookup.delete(block.key);\r\n\t});\r\n}\r\n\r\n/** @returns {void} */\r\nexport function fix_and_destroy_block(block, lookup) {\r\n\tblock.f();\r\n\tdestroy_block(block, lookup);\r\n}\r\n\r\n/** @returns {void} */\r\nexport function fix_and_outro_and_destroy_block(block, lookup) {\r\n\tblock.f();\r\n\toutro_and_destroy_block(block, lookup);\r\n}\r\n\r\n/** @returns {any[]} */\r\nexport function update_keyed_each(\r\n\told_blocks,\r\n\tdirty,\r\n\tget_key,\r\n\tdynamic,\r\n\tctx,\r\n\tlist,\r\n\tlookup,\r\n\tnode,\r\n\tdestroy,\r\n\tcreate_each_block,\r\n\tnext,\r\n\tget_context\r\n) {\r\n\tlet o = old_blocks.length;\r\n\tlet n = list.length;\r\n\tlet i = o;\r\n\tconst old_indexes = {};\r\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\r\n\tconst new_blocks = [];\r\n\tconst new_lookup = new Map();\r\n\tconst deltas = new Map();\r\n\tconst updates = [];\r\n\ti = n;\r\n\twhile (i--) {\r\n\t\tconst child_ctx = get_context(ctx, list, i);\r\n\t\tconst key = get_key(child_ctx);\r\n\t\tlet block = lookup.get(key);\r\n\t\tif (!block) {\r\n\t\t\tblock = create_each_block(key, child_ctx);\r\n\t\t\tblock.c();\r\n\t\t} else if (dynamic) {\r\n\t\t\t// defer updates until all the DOM shuffling is done\r\n\t\t\tupdates.push(() => block.p(child_ctx, dirty));\r\n\t\t}\r\n\t\tnew_lookup.set(key, (new_blocks[i] = block));\r\n\t\tif (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));\r\n\t}\r\n\tconst will_move = new Set();\r\n\tconst did_move = new Set();\r\n\t/** @returns {void} */\r\n\tfunction insert(block) {\r\n\t\ttransition_in(block, 1);\r\n\t\tblock.m(node, next);\r\n\t\tlookup.set(block.key, block);\r\n\t\tnext = block.first;\r\n\t\tn--;\r\n\t}\r\n\twhile (o && n) {\r\n\t\tconst new_block = new_blocks[n - 1];\r\n\t\tconst old_block = old_blocks[o - 1];\r\n\t\tconst new_key = new_block.key;\r\n\t\tconst old_key = old_block.key;\r\n\t\tif (new_block === old_block) {\r\n\t\t\t// do nothing\r\n\t\t\tnext = new_block.first;\r\n\t\t\to--;\r\n\t\t\tn--;\r\n\t\t} else if (!new_lookup.has(old_key)) {\r\n\t\t\t// remove old block\r\n\t\t\tdestroy(old_block, lookup);\r\n\t\t\to--;\r\n\t\t} else if (!lookup.has(new_key) || will_move.has(new_key)) {\r\n\t\t\tinsert(new_block);\r\n\t\t} else if (did_move.has(old_key)) {\r\n\t\t\to--;\r\n\t\t} else if (deltas.get(new_key) > deltas.get(old_key)) {\r\n\t\t\tdid_move.add(new_key);\r\n\t\t\tinsert(new_block);\r\n\t\t} else {\r\n\t\t\twill_move.add(old_key);\r\n\t\t\to--;\r\n\t\t}\r\n\t}\r\n\twhile (o--) {\r\n\t\tconst old_block = old_blocks[o];\r\n\t\tif (!new_lookup.has(old_block.key)) destroy(old_block, lookup);\r\n\t}\r\n\twhile (n) insert(new_blocks[n - 1]);\r\n\trun_all(updates);\r\n\treturn new_blocks;\r\n}\r\n\r\n/** @returns {void} */\r\nexport function validate_each_keys(ctx, list, get_context, get_key) {\r\n\tconst keys = new Map();\r\n\tfor (let i = 0; i < list.length; i++) {\r\n\t\tconst key = get_key(get_context(ctx, list, i));\r\n\t\tif (keys.has(key)) {\r\n\t\t\tlet value = '';\r\n\t\t\ttry {\r\n\t\t\t\tvalue = `with value '${String(key)}' `;\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// can't stringify\r\n\t\t\t}\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(\r\n\t\t\t\t\tkey\r\n\t\t\t\t)} and ${i} ${value}are duplicates`\r\n\t\t\t);\r\n\t\t}\r\n\t\tkeys.set(key, i);\r\n\t}\r\n}\r\n","import {\r\n\tadd_render_callback,\r\n\tflush,\r\n\tflush_render_callbacks,\r\n\tschedule_update,\r\n\tdirty_components\r\n} from './scheduler.js';\r\nimport { current_component, set_current_component } from './lifecycle.js';\r\nimport { blank_object, is_empty, is_function, run, run_all, noop } from './utils.js';\r\nimport {\r\n\tchildren,\r\n\tdetach,\r\n\tstart_hydrating,\r\n\tend_hydrating,\r\n\tget_custom_elements_slots,\r\n\tinsert,\r\n\telement,\r\n\tattr\r\n} from './dom.js';\r\nimport { transition_in } from './transitions.js';\r\n\r\n/** @returns {void} */\r\nexport function bind(component, name, callback) {\r\n\tconst index = component.$$.props[name];\r\n\tif (index !== undefined) {\r\n\t\tcomponent.$$.bound[index] = callback;\r\n\t\tcallback(component.$$.ctx[index]);\r\n\t}\r\n}\r\n\r\n/** @returns {void} */\r\nexport function create_component(block) {\r\n\tblock && block.c();\r\n}\r\n\r\n/** @returns {void} */\r\nexport function claim_component(block, parent_nodes) {\r\n\tblock && block.l(parent_nodes);\r\n}\r\n\r\n/** @returns {void} */\r\nexport function mount_component(component, target, anchor) {\r\n\tconst { fragment, after_update } = component.$$;\r\n\tfragment && fragment.m(target, anchor);\r\n\t// onMount happens before the initial afterUpdate\r\n\tadd_render_callback(() => {\r\n\t\tconst new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\r\n\t\t// if the component was destroyed immediately\r\n\t\t// it will update the `$$.on_destroy` reference to `null`.\r\n\t\t// the destructured on_destroy may still reference to the old array\r\n\t\tif (component.$$.on_destroy) {\r\n\t\t\tcomponent.$$.on_destroy.push(...new_on_destroy);\r\n\t\t} else {\r\n\t\t\t// Edge case - component was destroyed immediately,\r\n\t\t\t// most likely as a result of a binding initialising\r\n\t\t\trun_all(new_on_destroy);\r\n\t\t}\r\n\t\tcomponent.$$.on_mount = [];\r\n\t});\r\n\tafter_update.forEach(add_render_callback);\r\n}\r\n\r\n/** @returns {void} */\r\nexport function destroy_component(component, detaching) {\r\n\tconst $$ = component.$$;\r\n\tif ($$.fragment !== null) {\r\n\t\tflush_render_callbacks($$.after_update);\r\n\t\trun_all($$.on_destroy);\r\n\t\t$$.fragment && $$.fragment.d(detaching);\r\n\t\t// TODO null out other refs, including component.$$ (but need to\r\n\t\t// preserve final state?)\r\n\t\t$$.on_destroy = $$.fragment = null;\r\n\t\t$$.ctx = [];\r\n\t}\r\n}\r\n\r\n/** @returns {void} */\r\nfunction make_dirty(component, i) {\r\n\tif (component.$$.dirty[0] === -1) {\r\n\t\tdirty_components.push(component);\r\n\t\tschedule_update();\r\n\t\tcomponent.$$.dirty.fill(0);\r\n\t}\r\n\tcomponent.$$.dirty[(i / 31) | 0] |= 1 << i % 31;\r\n}\r\n\r\n// TODO: Document the other params\r\n/**\r\n * @param {SvelteComponent} component\r\n * @param {import('./public.js').ComponentConstructorOptions} options\r\n *\r\n * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.\r\n * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.\r\n * This will be the `add_css` function from the compiled component.\r\n *\r\n * @returns {void}\r\n */\r\nexport function init(\r\n\tcomponent,\r\n\toptions,\r\n\tinstance,\r\n\tcreate_fragment,\r\n\tnot_equal,\r\n\tprops,\r\n\tappend_styles = null,\r\n\tdirty = [-1]\r\n) {\r\n\tconst parent_component = current_component;\r\n\tset_current_component(component);\r\n\t/** @type {import('./private.js').T$$} */\r\n\tconst $$ = (component.$$ = {\r\n\t\tfragment: null,\r\n\t\tctx: [],\r\n\t\t// state\r\n\t\tprops,\r\n\t\tupdate: noop,\r\n\t\tnot_equal,\r\n\t\tbound: blank_object(),\r\n\t\t// lifecycle\r\n\t\ton_mount: [],\r\n\t\ton_destroy: [],\r\n\t\ton_disconnect: [],\r\n\t\tbefore_update: [],\r\n\t\tafter_update: [],\r\n\t\tcontext: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\r\n\t\t// everything else\r\n\t\tcallbacks: blank_object(),\r\n\t\tdirty,\r\n\t\tskip_bound: false,\r\n\t\troot: options.target || parent_component.$$.root\r\n\t});\r\n\tappend_styles && append_styles($$.root);\r\n\tlet ready = false;\r\n\t$$.ctx = instance\r\n\t\t? instance(component, options.props || {}, (i, ret, ...rest) => {\r\n\t\t\t\tconst value = rest.length ? rest[0] : ret;\r\n\t\t\t\tif ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {\r\n\t\t\t\t\tif (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);\r\n\t\t\t\t\tif (ready) make_dirty(component, i);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t  })\r\n\t\t: [];\r\n\t$$.update();\r\n\tready = true;\r\n\trun_all($$.before_update);\r\n\t// `false` as a special case of no DOM component\r\n\t$$.fragment = create_fragment ? create_fragment($$.ctx) : false;\r\n\tif (options.target) {\r\n\t\tif (options.hydrate) {\r\n\t\t\tstart_hydrating();\r\n\t\t\t// TODO: what is the correct type here?\r\n\t\t\t// @ts-expect-error\r\n\t\t\tconst nodes = children(options.target);\r\n\t\t\t$$.fragment && $$.fragment.l(nodes);\r\n\t\t\tnodes.forEach(detach);\r\n\t\t} else {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n\t\t\t$$.fragment && $$.fragment.c();\r\n\t\t}\r\n\t\tif (options.intro) transition_in(component.$$.fragment);\r\n\t\tmount_component(component, options.target, options.anchor);\r\n\t\tend_hydrating();\r\n\t\tflush();\r\n\t}\r\n\tset_current_component(parent_component);\r\n}\r\n\r\nexport let SvelteElement;\r\n\r\nif (typeof HTMLElement === 'function') {\r\n\tSvelteElement = class extends HTMLElement {\r\n\t\t/** The Svelte component constructor */\r\n\t\t$$ctor;\r\n\t\t/** Slots */\r\n\t\t$$s;\r\n\t\t/** The Svelte component instance */\r\n\t\t$$c;\r\n\t\t/** Whether or not the custom element is connected */\r\n\t\t$$cn = false;\r\n\t\t/** Component props data */\r\n\t\t$$d = {};\r\n\t\t/** `true` if currently in the process of reflecting component props back to attributes */\r\n\t\t$$r = false;\r\n\t\t/** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */\r\n\t\t$$p_d = {};\r\n\t\t/** @type {Record<string, Function[]>} Event listeners */\r\n\t\t$$l = {};\r\n\t\t/** @type {Map<Function, Function>} Event listener unsubscribe functions */\r\n\t\t$$l_u = new Map();\r\n\r\n\t\tconstructor($$componentCtor, $$slots, use_shadow_dom) {\r\n\t\t\tsuper();\r\n\t\t\tthis.$$ctor = $$componentCtor;\r\n\t\t\tthis.$$s = $$slots;\r\n\t\t\tif (use_shadow_dom) {\r\n\t\t\t\tthis.attachShadow({ mode: 'open' });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\taddEventListener(type, listener, options) {\r\n\t\t\t// We can't determine upfront if the event is a custom event or not, so we have to\r\n\t\t\t// listen to both. If someone uses a custom event with the same name as a regular\r\n\t\t\t// browser event, this fires twice - we can't avoid that.\r\n\t\t\tthis.$$l[type] = this.$$l[type] || [];\r\n\t\t\tthis.$$l[type].push(listener);\r\n\t\t\tif (this.$$c) {\r\n\t\t\t\tconst unsub = this.$$c.$on(type, listener);\r\n\t\t\t\tthis.$$l_u.set(listener, unsub);\r\n\t\t\t}\r\n\t\t\tsuper.addEventListener(type, listener, options);\r\n\t\t}\r\n\r\n\t\tremoveEventListener(type, listener, options) {\r\n\t\t\tsuper.removeEventListener(type, listener, options);\r\n\t\t\tif (this.$$c) {\r\n\t\t\t\tconst unsub = this.$$l_u.get(listener);\r\n\t\t\t\tif (unsub) {\r\n\t\t\t\t\tunsub();\r\n\t\t\t\t\tthis.$$l_u.delete(listener);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tasync connectedCallback() {\r\n\t\t\tthis.$$cn = true;\r\n\t\t\tif (!this.$$c) {\r\n\t\t\t\t// We wait one tick to let possible child slot elements be created/mounted\r\n\t\t\t\tawait Promise.resolve();\r\n\t\t\t\tif (!this.$$cn) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tfunction create_slot(name) {\r\n\t\t\t\t\treturn () => {\r\n\t\t\t\t\t\tlet node;\r\n\t\t\t\t\t\tconst obj = {\r\n\t\t\t\t\t\t\tc: function create() {\r\n\t\t\t\t\t\t\t\tnode = element('slot');\r\n\t\t\t\t\t\t\t\tif (name !== 'default') {\r\n\t\t\t\t\t\t\t\t\tattr(node, 'name', name);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * @param {HTMLElement} target\r\n\t\t\t\t\t\t\t * @param {HTMLElement} [anchor]\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tm: function mount(target, anchor) {\r\n\t\t\t\t\t\t\t\tinsert(target, node, anchor);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\td: function destroy(detaching) {\r\n\t\t\t\t\t\t\t\tif (detaching) {\r\n\t\t\t\t\t\t\t\t\tdetach(node);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treturn obj;\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tconst $$slots = {};\r\n\t\t\t\tconst existing_slots = get_custom_elements_slots(this);\r\n\t\t\t\tfor (const name of this.$$s) {\r\n\t\t\t\t\tif (name in existing_slots) {\r\n\t\t\t\t\t\t$$slots[name] = [create_slot(name)];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (const attribute of this.attributes) {\r\n\t\t\t\t\t// this.$$data takes precedence over this.attributes\r\n\t\t\t\t\tconst name = this.$$g_p(attribute.name);\r\n\t\t\t\t\tif (!(name in this.$$d)) {\r\n\t\t\t\t\t\tthis.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, 'toProp');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Port over props that were set programmatically before ce was initialized\r\n\t\t\t\tfor (const key in this.$$p_d) {\r\n\t\t\t\t\tif (!(key in this.$$d) && this[key] !== undefined) {\r\n\t\t\t\t\t\tthis.$$d[key] = this[key]; // don't transform, these were set through JavaScript\r\n\t\t\t\t\t\tdelete this[key]; // remove the property that shadows the getter/setter\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.$$c = new this.$$ctor({\r\n\t\t\t\t\ttarget: this.shadowRoot || this,\r\n\t\t\t\t\tprops: {\r\n\t\t\t\t\t\t...this.$$d,\r\n\t\t\t\t\t\t$$slots,\r\n\t\t\t\t\t\t$$scope: {\r\n\t\t\t\t\t\t\tctx: []\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Reflect component props as attributes\r\n\t\t\t\tconst reflect_attributes = () => {\r\n\t\t\t\t\tthis.$$r = true;\r\n\t\t\t\t\tfor (const key in this.$$p_d) {\r\n\t\t\t\t\t\tthis.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];\r\n\t\t\t\t\t\tif (this.$$p_d[key].reflect) {\r\n\t\t\t\t\t\t\tconst attribute_value = get_custom_element_value(\r\n\t\t\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\t\t\tthis.$$d[key],\r\n\t\t\t\t\t\t\t\tthis.$$p_d,\r\n\t\t\t\t\t\t\t\t'toAttribute'\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tif (attribute_value == null) {\r\n\t\t\t\t\t\t\t\tthis.removeAttribute(this.$$p_d[key].attribute || key);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.setAttribute(this.$$p_d[key].attribute || key, attribute_value);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.$$r = false;\r\n\t\t\t\t};\r\n\t\t\t\tthis.$$c.$$.after_update.push(reflect_attributes);\r\n\t\t\t\treflect_attributes(); // once initially because after_update is added too late for first render\r\n\r\n\t\t\t\tfor (const type in this.$$l) {\r\n\t\t\t\t\tfor (const listener of this.$$l[type]) {\r\n\t\t\t\t\t\tconst unsub = this.$$c.$on(type, listener);\r\n\t\t\t\t\t\tthis.$$l_u.set(listener, unsub);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.$$l = {};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte\r\n\t\t// and setting attributes through setAttribute etc, this is helpful\r\n\t\tattributeChangedCallback(attr, _oldValue, newValue) {\r\n\t\t\tif (this.$$r) return;\r\n\t\t\tattr = this.$$g_p(attr);\r\n\t\t\tthis.$$d[attr] = get_custom_element_value(attr, newValue, this.$$p_d, 'toProp');\r\n\t\t\tthis.$$c?.$set({ [attr]: this.$$d[attr] });\r\n\t\t}\r\n\r\n\t\tdisconnectedCallback() {\r\n\t\t\tthis.$$cn = false;\r\n\t\t\t// In a microtask, because this could be a move within the DOM\r\n\t\t\tPromise.resolve().then(() => {\r\n\t\t\t\tif (!this.$$cn) {\r\n\t\t\t\t\tthis.$$c.$destroy();\r\n\t\t\t\t\tthis.$$c = undefined;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t$$g_p(attribute_name) {\r\n\t\t\treturn (\r\n\t\t\t\tObject.keys(this.$$p_d).find(\r\n\t\t\t\t\t(key) =>\r\n\t\t\t\t\t\tthis.$$p_d[key].attribute === attribute_name ||\r\n\t\t\t\t\t\t(!this.$$p_d[key].attribute && key.toLowerCase() === attribute_name)\r\n\t\t\t\t) || attribute_name\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {string} prop\r\n * @param {any} value\r\n * @param {Record<string, CustomElementPropDefinition>} props_definition\r\n * @param {'toAttribute' | 'toProp'} [transform]\r\n */\r\nfunction get_custom_element_value(prop, value, props_definition, transform) {\r\n\tconst type = props_definition[prop]?.type;\r\n\tvalue = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;\r\n\tif (!transform || !props_definition[prop]) {\r\n\t\treturn value;\r\n\t} else if (transform === 'toAttribute') {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'Object':\r\n\t\t\tcase 'Array':\r\n\t\t\t\treturn value == null ? null : JSON.stringify(value);\r\n\t\t\tcase 'Boolean':\r\n\t\t\t\treturn value ? '' : null;\r\n\t\t\tcase 'Number':\r\n\t\t\t\treturn value == null ? null : value;\r\n\t\t\tdefault:\r\n\t\t\t\treturn value;\r\n\t\t}\r\n\t} else {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'Object':\r\n\t\t\tcase 'Array':\r\n\t\t\t\treturn value && JSON.parse(value);\r\n\t\t\tcase 'Boolean':\r\n\t\t\t\treturn value; // conversion already handled above\r\n\t\t\tcase 'Number':\r\n\t\t\t\treturn value != null ? +value : value;\r\n\t\t\tdefault:\r\n\t\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Turn a Svelte component into a custom element.\r\n * @param {import('./public.js').ComponentType} Component  A Svelte component constructor\r\n * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe\r\n * @param {string[]} slots  The slots to create\r\n * @param {string[]} accessors  Other accessors besides the ones for props the component has\r\n * @param {boolean} use_shadow_dom  Whether to use shadow DOM\r\n * @param {(ce: new () => HTMLElement) => new () => HTMLElement} [extend]\r\n */\r\nexport function create_custom_element(\r\n\tComponent,\r\n\tprops_definition,\r\n\tslots,\r\n\taccessors,\r\n\tuse_shadow_dom,\r\n\textend\r\n) {\r\n\tlet Class = class extends SvelteElement {\r\n\t\tconstructor() {\r\n\t\t\tsuper(Component, slots, use_shadow_dom);\r\n\t\t\tthis.$$p_d = props_definition;\r\n\t\t}\r\n\t\tstatic get observedAttributes() {\r\n\t\t\treturn Object.keys(props_definition).map((key) =>\r\n\t\t\t\t(props_definition[key].attribute || key).toLowerCase()\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\tObject.keys(props_definition).forEach((prop) => {\r\n\t\tObject.defineProperty(Class.prototype, prop, {\r\n\t\t\tget() {\r\n\t\t\t\treturn this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];\r\n\t\t\t},\r\n\t\t\tset(value) {\r\n\t\t\t\tvalue = get_custom_element_value(prop, value, props_definition);\r\n\t\t\t\tthis.$$d[prop] = value;\r\n\t\t\t\tthis.$$c?.$set({ [prop]: value });\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\taccessors.forEach((accessor) => {\r\n\t\tObject.defineProperty(Class.prototype, accessor, {\r\n\t\t\tget() {\r\n\t\t\t\treturn this.$$c?.[accessor];\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\tif (extend) {\r\n\t\t// @ts-expect-error - assigning here is fine\r\n\t\tClass = extend(Class);\r\n\t}\r\n\tComponent.element = /** @type {any} */ (Class);\r\n\treturn Class;\r\n}\r\n\r\n/**\r\n * Base class for Svelte components. Used when dev=false.\r\n *\r\n * @template {Record<string, any>} [Props=any]\r\n * @template {Record<string, any>} [Events=any]\r\n */\r\nexport class SvelteComponent {\r\n\t/**\r\n\t * ### PRIVATE API\r\n\t *\r\n\t * Do not use, may change at any time\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\t$$ = undefined;\r\n\t/**\r\n\t * ### PRIVATE API\r\n\t *\r\n\t * Do not use, may change at any time\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\t$$set = undefined;\r\n\r\n\t/** @returns {void} */\r\n\t$destroy() {\r\n\t\tdestroy_component(this, 1);\r\n\t\tthis.$destroy = noop;\r\n\t}\r\n\r\n\t/**\r\n\t * @template {Extract<keyof Events, string>} K\r\n\t * @param {K} type\r\n\t * @param {((e: Events[K]) => void) | null | undefined} callback\r\n\t * @returns {() => void}\r\n\t */\r\n\t$on(type, callback) {\r\n\t\tif (!is_function(callback)) {\r\n\t\t\treturn noop;\r\n\t\t}\r\n\t\tconst callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\r\n\t\tcallbacks.push(callback);\r\n\t\treturn () => {\r\n\t\t\tconst index = callbacks.indexOf(callback);\r\n\t\t\tif (index !== -1) callbacks.splice(index, 1);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Partial<Props>} props\r\n\t * @returns {void}\r\n\t */\r\n\t$set(props) {\r\n\t\tif (this.$$set && !is_empty(props)) {\r\n\t\t\tthis.$$.skip_bound = true;\r\n\t\t\tthis.$$set(props);\r\n\t\t\tthis.$$.skip_bound = false;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @typedef {Object} CustomElementPropDefinition\r\n * @property {string} [attribute]\r\n * @property {boolean} [reflect]\r\n * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]\r\n */\r\n","// generated during release, do not modify\r\n\r\n/**\r\n * The current version, as set in package.json.\r\n *\r\n * https://svelte.dev/docs/svelte-compiler#svelte-version\r\n * @type {string}\r\n */\r\nexport const VERSION = '4.2.9';\r\nexport const PUBLIC_VERSION = '4';\r\n","import {\r\n\tcustom_event,\r\n\tappend,\r\n\tappend_hydration,\r\n\tinsert,\r\n\tinsert_hydration,\r\n\tdetach,\r\n\tlisten,\r\n\tattr\r\n} from './dom.js';\r\nimport { SvelteComponent } from './Component.js';\r\nimport { is_void } from '../../shared/utils/names.js';\r\nimport { VERSION } from '../../shared/version.js';\r\nimport { contenteditable_truthy_values } from './utils.js';\r\nimport { ensure_array_like } from './each.js';\r\n\r\n/**\r\n * @template T\r\n * @param {string} type\r\n * @param {T} [detail]\r\n * @returns {void}\r\n */\r\nexport function dispatch_dev(type, detail) {\r\n\tdocument.dispatchEvent(custom_event(type, { version: VERSION, ...detail }, { bubbles: true }));\r\n}\r\n\r\n/**\r\n * @param {Node} target\r\n * @param {Node} node\r\n * @returns {void}\r\n */\r\nexport function append_dev(target, node) {\r\n\tdispatch_dev('SvelteDOMInsert', { target, node });\r\n\tappend(target, node);\r\n}\r\n\r\n/**\r\n * @param {Node} target\r\n * @param {Node} node\r\n * @returns {void}\r\n */\r\nexport function append_hydration_dev(target, node) {\r\n\tdispatch_dev('SvelteDOMInsert', { target, node });\r\n\tappend_hydration(target, node);\r\n}\r\n\r\n/**\r\n * @param {Node} target\r\n * @param {Node} node\r\n * @param {Node} [anchor]\r\n * @returns {void}\r\n */\r\nexport function insert_dev(target, node, anchor) {\r\n\tdispatch_dev('SvelteDOMInsert', { target, node, anchor });\r\n\tinsert(target, node, anchor);\r\n}\r\n\r\n/** @param {Node} target\r\n * @param {Node} node\r\n * @param {Node} [anchor]\r\n * @returns {void}\r\n */\r\nexport function insert_hydration_dev(target, node, anchor) {\r\n\tdispatch_dev('SvelteDOMInsert', { target, node, anchor });\r\n\tinsert_hydration(target, node, anchor);\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n * @returns {void}\r\n */\r\nexport function detach_dev(node) {\r\n\tdispatch_dev('SvelteDOMRemove', { node });\r\n\tdetach(node);\r\n}\r\n\r\n/**\r\n * @param {Node} before\r\n * @param {Node} after\r\n * @returns {void}\r\n */\r\nexport function detach_between_dev(before, after) {\r\n\twhile (before.nextSibling && before.nextSibling !== after) {\r\n\t\tdetach_dev(before.nextSibling);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Node} after\r\n * @returns {void}\r\n */\r\nexport function detach_before_dev(after) {\r\n\twhile (after.previousSibling) {\r\n\t\tdetach_dev(after.previousSibling);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Node} before\r\n * @returns {void}\r\n */\r\nexport function detach_after_dev(before) {\r\n\twhile (before.nextSibling) {\r\n\t\tdetach_dev(before.nextSibling);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n * @param {string} event\r\n * @param {EventListenerOrEventListenerObject} handler\r\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\r\n * @param {boolean} [has_prevent_default]\r\n * @param {boolean} [has_stop_propagation]\r\n * @param {boolean} [has_stop_immediate_propagation]\r\n * @returns {() => void}\r\n */\r\nexport function listen_dev(\r\n\tnode,\r\n\tevent,\r\n\thandler,\r\n\toptions,\r\n\thas_prevent_default,\r\n\thas_stop_propagation,\r\n\thas_stop_immediate_propagation\r\n) {\r\n\tconst modifiers =\r\n\t\toptions === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\r\n\tif (has_prevent_default) modifiers.push('preventDefault');\r\n\tif (has_stop_propagation) modifiers.push('stopPropagation');\r\n\tif (has_stop_immediate_propagation) modifiers.push('stopImmediatePropagation');\r\n\tdispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\r\n\tconst dispose = listen(node, event, handler, options);\r\n\treturn () => {\r\n\t\tdispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\r\n\t\tdispose();\r\n\t};\r\n}\r\n\r\n/**\r\n * @param {Element} node\r\n * @param {string} attribute\r\n * @param {string} [value]\r\n * @returns {void}\r\n */\r\nexport function attr_dev(node, attribute, value) {\r\n\tattr(node, attribute, value);\r\n\tif (value == null) dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\r\n\telse dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\r\n}\r\n\r\n/**\r\n * @param {Element} node\r\n * @param {string} property\r\n * @param {any} [value]\r\n * @returns {void}\r\n */\r\nexport function prop_dev(node, property, value) {\r\n\tnode[property] = value;\r\n\tdispatch_dev('SvelteDOMSetProperty', { node, property, value });\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} node\r\n * @param {string} property\r\n * @param {any} [value]\r\n * @returns {void}\r\n */\r\nexport function dataset_dev(node, property, value) {\r\n\tnode.dataset[property] = value;\r\n\tdispatch_dev('SvelteDOMSetDataset', { node, property, value });\r\n}\r\n\r\n/**\r\n * @param {Text} text\r\n * @param {unknown} data\r\n * @returns {void}\r\n */\r\nexport function set_data_dev(text, data) {\r\n\tdata = '' + data;\r\n\tif (text.data === data) return;\r\n\tdispatch_dev('SvelteDOMSetData', { node: text, data });\r\n\ttext.data = /** @type {string} */ (data);\r\n}\r\n\r\n/**\r\n * @param {Text} text\r\n * @param {unknown} data\r\n * @returns {void}\r\n */\r\nexport function set_data_contenteditable_dev(text, data) {\r\n\tdata = '' + data;\r\n\tif (text.wholeText === data) return;\r\n\tdispatch_dev('SvelteDOMSetData', { node: text, data });\r\n\ttext.data = /** @type {string} */ (data);\r\n}\r\n\r\n/**\r\n * @param {Text} text\r\n * @param {unknown} data\r\n * @param {string} attr_value\r\n * @returns {void}\r\n */\r\nexport function set_data_maybe_contenteditable_dev(text, data, attr_value) {\r\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\r\n\t\tset_data_contenteditable_dev(text, data);\r\n\t} else {\r\n\t\tset_data_dev(text, data);\r\n\t}\r\n}\r\n\r\nexport function ensure_array_like_dev(arg) {\r\n\tif (\r\n\t\ttypeof arg !== 'string' &&\r\n\t\t!(arg && typeof arg === 'object' && 'length' in arg) &&\r\n\t\t!(typeof Symbol === 'function' && arg && Symbol.iterator in arg)\r\n\t) {\r\n\t\tthrow new Error('{#each} only works with iterable values.');\r\n\t}\r\n\treturn ensure_array_like(arg);\r\n}\r\n\r\n/**\r\n * @returns {void} */\r\nexport function validate_slots(name, slot, keys) {\r\n\tfor (const slot_key of Object.keys(slot)) {\r\n\t\tif (!~keys.indexOf(slot_key)) {\r\n\t\t\tconsole.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {unknown} tag\r\n * @returns {void}\r\n */\r\nexport function validate_dynamic_element(tag) {\r\n\tconst is_string = typeof tag === 'string';\r\n\tif (tag && !is_string) {\r\n\t\tthrow new Error('<svelte:element> expects \"this\" attribute to be a string.');\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {undefined | string} tag\r\n * @returns {void}\r\n */\r\nexport function validate_void_dynamic_element(tag) {\r\n\tif (tag && is_void(tag)) {\r\n\t\tconsole.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\r\n\t}\r\n}\r\n\r\nexport function construct_svelte_component_dev(component, props) {\r\n\tconst error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\r\n\ttry {\r\n\t\tconst instance = new component(props);\r\n\t\tif (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\r\n\t\t\tthrow new Error(error_message);\r\n\t\t}\r\n\t\treturn instance;\r\n\t} catch (err) {\r\n\t\tconst { message } = err;\r\n\t\tif (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\r\n\t\t\tthrow new Error(error_message);\r\n\t\t} else {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\r\n *\r\n * Can be used to create strongly typed Svelte components.\r\n *\r\n * #### Example:\r\n *\r\n * You have component library on npm called `component-library`, from which\r\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\r\n * you want to provide typings. Therefore you create a `index.d.ts`:\r\n * ```ts\r\n * import { SvelteComponent } from \"svelte\";\r\n * export class MyComponent extends SvelteComponent<{foo: string}> {}\r\n * ```\r\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\r\n * to provide intellisense and to use the component like this in a Svelte file\r\n * with TypeScript:\r\n * ```svelte\r\n * <script lang=\"ts\">\r\n * \timport { MyComponent } from \"component-library\";\r\n * </script>\r\n * <MyComponent foo={'bar'} />\r\n * ```\r\n * @template {Record<string, any>} [Props=any]\r\n * @template {Record<string, any>} [Events=any]\r\n * @template {Record<string, any>} [Slots=any]\r\n * @extends {SvelteComponent<Props, Events>}\r\n */\r\nexport class SvelteComponentDev extends SvelteComponent {\r\n\t/**\r\n\t * For type checking capabilities only.\r\n\t * Does not exist at runtime.\r\n\t * ### DO NOT USE!\r\n\t *\r\n\t * @type {Props}\r\n\t */\r\n\t$$prop_def;\r\n\t/**\r\n\t * For type checking capabilities only.\r\n\t * Does not exist at runtime.\r\n\t * ### DO NOT USE!\r\n\t *\r\n\t * @type {Events}\r\n\t */\r\n\t$$events_def;\r\n\t/**\r\n\t * For type checking capabilities only.\r\n\t * Does not exist at runtime.\r\n\t * ### DO NOT USE!\r\n\t *\r\n\t * @type {Slots}\r\n\t */\r\n\t$$slot_def;\r\n\r\n\t/** @param {import('./public.js').ComponentConstructorOptions<Props>} options */\r\n\tconstructor(options) {\r\n\t\tif (!options || (!options.target && !options.$$inline)) {\r\n\t\t\tthrow new Error(\"'target' is a required option\");\r\n\t\t}\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/** @returns {void} */\r\n\t$destroy() {\r\n\t\tsuper.$destroy();\r\n\t\tthis.$destroy = () => {\r\n\t\t\tconsole.warn('Component was already destroyed'); // eslint-disable-line no-console\r\n\t\t};\r\n\t}\r\n\r\n\t/** @returns {void} */\r\n\t$capture_state() {}\r\n\r\n\t/** @returns {void} */\r\n\t$inject_state() {}\r\n}\r\n/**\r\n * @template {Record<string, any>} [Props=any]\r\n * @template {Record<string, any>} [Events=any]\r\n * @template {Record<string, any>} [Slots=any]\r\n * @deprecated Use `SvelteComponent` instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512\r\n * @extends {SvelteComponentDev<Props, Events, Slots>}\r\n */\r\nexport class SvelteComponentTyped extends SvelteComponentDev {}\r\n\r\n/** @returns {() => void} */\r\nexport function loop_guard(timeout) {\r\n\tconst start = Date.now();\r\n\treturn () => {\r\n\t\tif (Date.now() - start > timeout) {\r\n\t\t\tthrow new Error('Infinite loop detected');\r\n\t\t}\r\n\t};\r\n}\r\n","import { PUBLIC_VERSION } from '../../../shared/version.js';\r\n\r\nif (typeof window !== 'undefined')\r\n\t// @ts-ignore\r\n\t(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);\r\n","<script lang=\"ts\">\r\n\tconst MAXHEIGHT = 200;\r\n\tlet answer = '';\r\n\tlet prompt = '';\r\n\tlet code = '';\r\n\tlet selectedOption = '';\r\n\r\n\tconst options = ['Formatting', 'Efficiency', 'Explanation'];\r\n\r\n\t// resize text area based on text amount\r\n\tfunction resizeTextarea(event?: Event) {\r\n\t\tlet target: HTMLTextAreaElement;\r\n\t\tif (event) {\r\n\t\t\ttarget = event.target as HTMLTextAreaElement;\r\n\t\t} else {\r\n\t\t\t// Correctly select the textarea by its ID\r\n\t\t\ttarget = document.getElementById('mytextarea') as HTMLTextAreaElement;\r\n\t\t}\r\n\t\tif (!target) return; // Exit if textarea is not found, for safety\r\n\t\ttarget.style.height = 'auto';\r\n\t\ttarget.style.height = `${Math.min(target.scrollHeight, MAXHEIGHT)}px`;\r\n\t}\r\n\r\n\t// listen to keyboard commands\r\n\twindow.addEventListener('message', (event) => {\r\n\t\tconst message = event.data;\r\n\t\tswitch (message.command) {\r\n\t\t\tcase 'setCode':\r\n\t\t\t\tcode = message.code;\r\n\t\t\t\tsetTimeout(resizeTextarea, 0);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n<div>Custom Prompt:</div>\r\n\r\n<form on:submit|preventDefault={() => {}}>\r\n\t<input bind:value={prompt} placeholder=\"Optional\" disabled={selectedOption != ''} />\r\n</form>\r\n\r\n<div>Standard Prompt:</div>\r\n\r\n<select bind:value={selectedOption}>\r\n\t<option value=\"\" selected>Use Custom Prompt</option>\r\n\t{#each options as option}\r\n\t\t<option value={option}>{option}</option>\r\n\t{/each}\r\n</select>\r\n\r\n<div>Code:</div>\r\n\r\n<form on:submit|preventDefault={() => {}}>\r\n\t<textarea id=\"mytextarea\" bind:value={code} on:input={resizeTextarea} placeholder=\"Optional\"></textarea>\r\n</form>\r\n\r\n<div>Answer:</div>\r\n\r\n<button\r\n\ton:click={() => {\r\n\t\tanswer = 'AI generated answer goes here';\r\n\t}}>Generate</button\r\n>\r\n\r\n<div>{answer}</div>\r\n\r\n<style>\r\n\ttextarea {\r\n\t\twidth: 100%;\r\n\t\tbox-sizing: border-box; /* Ensures padding does not affect overall width */\r\n\t\toverflow-y: auto;\r\n\t\tresize: none; /* Disables manual resizing */\r\n\t\tmax-height: 200px;\r\n\t}\r\n</style>\r\n","import App from \"../components/Sidebar.svelte\";\r\n\r\nconst app = new App({\r\n  target: document.body,\r\n});\r\n\r\nexport default app;"],"names":["App"],"mappings":";;;CAAA;CACO,SAAS,IAAI,GAAG,EAAE;AA8BzB;CACA;CACO,SAAS,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;CAChE,CAAC,OAAO,CAAC,aAAa,GAAG;CACzB,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;CACnC,EAAE,CAAC;CACH,CAAC;AACD;CACO,SAAS,GAAG,CAAC,EAAE,EAAE;CACxB,CAAC,OAAO,EAAE,EAAE,CAAC;CACb,CAAC;AACD;CACO,SAAS,YAAY,GAAG;CAC/B,CAAC,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;CAC5B,CAAC;AACD;CACA;CACA;CACA;CACA;CACO,SAAS,OAAO,CAAC,GAAG,EAAE;CAC7B,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;CAClB,CAAC;AACD;CACA;CACA;CACA;CACA;CACO,SAAS,WAAW,CAAC,KAAK,EAAE;CACnC,CAAC,OAAO,OAAO,KAAK,KAAK,UAAU,CAAC;CACpC,CAAC;AACD;CACA;CACO,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;CACrC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAC,IAAI,OAAO,CAAC,KAAK,UAAU,CAAC;CAC7F,CAAC;AAoDD;CACA;CACO,SAAS,QAAQ,CAAC,GAAG,EAAE;CAC9B,CAAC,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;CACtC;;CCeA;CACA;CACA;CACA;CACA;CACO,SAAS,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE;CACrC,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;CAC1B,CAAC;AAuFD;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;CAC7C,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,IAAI,IAAI,CAAC,CAAC;CAC3C,CAAC;AAeD;CACA;CACA;CACA;CACA;CACO,SAAS,MAAM,CAAC,IAAI,EAAE;CAC7B,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;CACtB,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;CACpC,EAAE;CACF,CAAC;AACD;CACA;CACA;CACO,SAAS,YAAY,CAAC,UAAU,EAAE,SAAS,EAAE;CACpD,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;CAChD,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;CAChD,EAAE;CACF,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,OAAO,CAAC,IAAI,EAAE;CAC9B,CAAC,OAAO,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;CACrC,CAAC;AA0CD;CACA;CACA;CACA;CACA;CACO,SAAS,IAAI,CAAC,IAAI,EAAE;CAC3B,CAAC,OAAO,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;CACtC,CAAC;AACD;CACA;CACA;CACO,SAAS,KAAK,GAAG;CACxB,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;CAClB,CAAC;AAeD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE;CACtD,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;CAChD,CAAC,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;CAChE,CAAC;AACD;CACA;CACA;CACO,SAAS,eAAe,CAAC,EAAE,EAAE;CACpC,CAAC,OAAO,UAAU,KAAK,EAAE;CACzB,EAAE,KAAK,CAAC,cAAc,EAAE,CAAC;CACzB;CACA,EAAE,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;CAC9B,EAAE,CAAC;CACH,CAAC;AAuCD;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CAC7C,CAAC,IAAI,KAAK,IAAI,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;CACpD,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;CACtF,CAAC;AA2LD;CACA;CACA;CACA;CACA;CACO,SAAS,QAAQ,CAAC,OAAO,EAAE;CAClC,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;CACvC,CAAC;AA+OD;CACA;CACA;CACO,SAAS,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE;CAC9C,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC;CAC1C,CAAC;AAqBD;CACA;CACA;CACO,SAAS,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;CACvD,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;CACpD,EAAE,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;CACnC,EAAE,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,EAAE;CAChC,GAAG,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;CAC1B,GAAG,OAAO;CACV,GAAG;CACH,EAAE;CACF,CAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,KAAK,SAAS,EAAE;CACvC,EAAE,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;CAC5B,EAAE;CACF,CAAC;AAUD;CACO,SAAS,YAAY,CAAC,MAAM,EAAE;CACrC,CAAC,MAAM,eAAe,GAAG,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;CAC1D,CAAC,OAAO,eAAe,IAAI,eAAe,CAAC,OAAO,CAAC;CACnD,CAAC;AAiGD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,OAAO,GAAG,KAAK,EAAE,UAAU,GAAG,KAAK,EAAE,GAAG,EAAE,EAAE;CACzF,CAAC,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;CAC/D,CAAC;AAsND;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;AACA;CACA;AACA;CACA;AACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;;CChuCO,IAAI,iBAAiB,CAAC;AAC7B;CACA;CACO,SAAS,qBAAqB,CAAC,SAAS,EAAE;CACjD,CAAC,iBAAiB,GAAG,SAAS,CAAC;CAC/B;;CCJO,MAAM,gBAAgB,GAAG,EAAE,CAAC;CAE5B,MAAM,iBAAiB,GAAG,EAAE,CAAC;AACpC;CACA,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC1B;CACA,MAAM,eAAe,GAAG,EAAE,CAAC;AAC3B;CACA,MAAM,gBAAgB,mBAAmB,OAAO,CAAC,OAAO,EAAE,CAAC;AAC3D;CACA,IAAI,gBAAgB,GAAG,KAAK,CAAC;AAC7B;CACA;CACO,SAAS,eAAe,GAAG;CAClC,CAAC,IAAI,CAAC,gBAAgB,EAAE;CACxB,EAAE,gBAAgB,GAAG,IAAI,CAAC;CAC1B,EAAE,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CAC/B,EAAE;CACF,CAAC;AAOD;CACA;CACO,SAAS,mBAAmB,CAAC,EAAE,EAAE;CACxC,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CAC3B,CAAC;AAMD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;AACjC;CACA,IAAI,QAAQ,GAAG,CAAC,CAAC;AACjB;CACA;CACO,SAAS,KAAK,GAAG;CACxB;CACA;CACA;CACA,CAAC,IAAI,QAAQ,KAAK,CAAC,EAAE;CACrB,EAAE,OAAO;CACT,EAAE;CACF,CAAC,MAAM,eAAe,GAAG,iBAAiB,CAAC;CAC3C,CAAC,GAAG;CACJ;CACA;CACA,EAAE,IAAI;CACN,GAAG,OAAO,QAAQ,GAAG,gBAAgB,CAAC,MAAM,EAAE;CAC9C,IAAI,MAAM,SAAS,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;CACjD,IAAI,QAAQ,EAAE,CAAC;CACf,IAAI,qBAAqB,CAAC,SAAS,CAAC,CAAC;CACrC,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;CACzB,IAAI;CACJ,GAAG,CAAC,OAAO,CAAC,EAAE;CACd;CACA,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;CAC/B,GAAG,QAAQ,GAAG,CAAC,CAAC;CAChB,GAAG,MAAM,CAAC,CAAC;CACX,GAAG;CACH,EAAE,qBAAqB,CAAC,IAAI,CAAC,CAAC;CAC9B,EAAE,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;CAC9B,EAAE,QAAQ,GAAG,CAAC,CAAC;CACf,EAAE,OAAO,iBAAiB,CAAC,MAAM,EAAE,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC;CAC7D;CACA;CACA;CACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;CACvD,GAAG,MAAM,QAAQ,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;CACxC,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;CACtC;CACA,IAAI,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;CACjC,IAAI,QAAQ,EAAE,CAAC;CACf,IAAI;CACJ,GAAG;CACH,EAAE,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;CAC9B,EAAE,QAAQ,gBAAgB,CAAC,MAAM,EAAE;CACnC,CAAC,OAAO,eAAe,CAAC,MAAM,EAAE;CAChC,EAAE,eAAe,CAAC,GAAG,EAAE,EAAE,CAAC;CAC1B,EAAE;CACF,CAAC,gBAAgB,GAAG,KAAK,CAAC;CAC1B,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;CACxB,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;CACxC,CAAC;AACD;CACA;CACA,SAAS,MAAM,CAAC,EAAE,EAAE;CACpB,CAAC,IAAI,EAAE,CAAC,QAAQ,KAAK,IAAI,EAAE;CAC3B,EAAE,EAAE,CAAC,MAAM,EAAE,CAAC;CACd,EAAE,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;CAC5B,EAAE,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;CACzB,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CAClB,EAAE,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;CAC9C,EAAE,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;CAC/C,EAAE;CACF,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,sBAAsB,CAAC,GAAG,EAAE;CAC5C,CAAC,MAAM,QAAQ,GAAG,EAAE,CAAC;CACrB,CAAC,MAAM,OAAO,GAAG,EAAE,CAAC;CACpB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CAC/F,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;CAC7B,CAAC,gBAAgB,GAAG,QAAQ,CAAC;CAC7B;;CCnGA,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;AAyB3B;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE;CAC5C,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,EAAE;CACvB,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;CACzB,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;CACjB,EAAE;CACF,CAAC;AAwWD;CACA;CACA;CACA;CACA;AACA;CACA;CACA;CACA;CACA;CACA;CACA;AACA;CACA;CACA;CACA;CACA;CACA;CACA;AACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;;CCzcA;AACA;CACO,SAAS,iBAAiB,CAAC,sBAAsB,EAAE;CAC1D,CAAC,OAAO,sBAAsB,EAAE,MAAM,KAAK,SAAS;CACpD,IAAI,sBAAsB;CAC1B,IAAI,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;CACvC;;CC+BA;CACO,SAAS,eAAe,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE;CAC3D,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC;CACjD,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;CACxC;CACA,CAAC,mBAAmB,CAAC,MAAM;CAC3B,EAAE,MAAM,cAAc,GAAG,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;CAC5E;CACA;CACA;CACA,EAAE,IAAI,SAAS,CAAC,EAAE,CAAC,UAAU,EAAE;CAC/B,GAAG,SAAS,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;CACnD,GAAG,MAAM;CACT;CACA;CACA,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;CAC3B,GAAG;CACH,EAAE,SAAS,CAAC,EAAE,CAAC,QAAQ,GAAG,EAAE,CAAC;CAC7B,EAAE,CAAC,CAAC;CACJ,CAAC,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;CAC3C,CAAC;AACD;CACA;CACO,SAAS,iBAAiB,CAAC,SAAS,EAAE,SAAS,EAAE;CACxD,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC;CACzB,CAAC,IAAI,EAAE,CAAC,QAAQ,KAAK,IAAI,EAAE;CAC3B,EAAE,sBAAsB,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;CAC1C,EAAE,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;CACzB,EAAE,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;CAC1C;CACA;CACA,EAAE,EAAE,CAAC,UAAU,GAAG,EAAE,CAAC,QAAQ,GAAG,IAAI,CAAC;CACrC,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC;CACd,EAAE;CACF,CAAC;AACD;CACA;CACA,SAAS,UAAU,CAAC,SAAS,EAAE,CAAC,EAAE;CAClC,CAAC,IAAI,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;CACnC,EAAE,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;CACnC,EAAE,eAAe,EAAE,CAAC;CACpB,EAAE,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CAC7B,EAAE;CACF,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;CACjD,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,IAAI;CACpB,CAAC,SAAS;CACV,CAAC,OAAO;CACR,CAAC,QAAQ;CACT,CAAC,eAAe;CAChB,CAAC,SAAS;CACV,CAAC,KAAK;CACN,CAAC,aAAa,GAAG,IAAI;CACrB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;CACb,EAAE;CACF,CAAC,MAAM,gBAAgB,GAAG,iBAAiB,CAAC;CAC5C,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;CAClC;CACA,CAAC,MAAM,EAAE,IAAI,SAAS,CAAC,EAAE,GAAG;CAC5B,EAAE,QAAQ,EAAE,IAAI;CAChB,EAAE,GAAG,EAAE,EAAE;CACT;CACA,EAAE,KAAK;CACP,EAAE,MAAM,EAAE,IAAI;CACd,EAAE,SAAS;CACX,EAAE,KAAK,EAAE,YAAY,EAAE;CACvB;CACA,EAAE,QAAQ,EAAE,EAAE;CACd,EAAE,UAAU,EAAE,EAAE;CAChB,EAAE,aAAa,EAAE,EAAE;CACnB,EAAE,aAAa,EAAE,EAAE;CACnB,EAAE,YAAY,EAAE,EAAE;CAClB,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,KAAK,gBAAgB,GAAG,gBAAgB,CAAC,EAAE,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;CAC5F;CACA,EAAE,SAAS,EAAE,YAAY,EAAE;CAC3B,EAAE,KAAK;CACP,EAAE,UAAU,EAAE,KAAK;CACnB,EAAE,IAAI,EAAE,OAAO,CAAC,MAAM,IAAI,gBAAgB,CAAC,EAAE,CAAC,IAAI;CAClD,EAAE,CAAC,CAAC;CACJ,CAAC,aAAa,IAAI,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;CACzC,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC;CACnB,CAAC,EAAE,CAAC,GAAG,GAAG,QAAQ;CAClB,IAAI,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,IAAI,KAAK;CAClE,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;CAC9C,IAAI,IAAI,EAAE,CAAC,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,EAAE;CAC7D,KAAK,IAAI,CAAC,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;CAC3D,KAAK,IAAI,KAAK,EAAE,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;CACzC,KAAK;CACL,IAAI,OAAO,GAAG,CAAC;CACf,KAAK,CAAC;CACN,IAAI,EAAE,CAAC;CACP,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC;CACb,CAAC,KAAK,GAAG,IAAI,CAAC;CACd,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;CAC3B;CACA,CAAC,EAAE,CAAC,QAAQ,GAAG,eAAe,GAAG,eAAe,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;CACjE,CAAC,IAAI,OAAO,CAAC,MAAM,EAAE;CACrB,EAAE,IAAI,OAAO,CAAC,OAAO,EAAE;CAEvB;CACA;CACA,GAAG,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;CAC1C,GAAG,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;CACvC,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;CACzB,GAAG,MAAM;CACT;CACA,GAAG,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;CAClC,GAAG;CACH,EAAE,IAAI,OAAO,CAAC,KAAK,EAAE,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;CAC1D,EAAE,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;CAE7D,EAAE,KAAK,EAAE,CAAC;CACV,EAAE;CACF,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;CACzC,CAAC;AA4RD;CACA;CACA;CACA;CACA;CACA;CACA;CACO,MAAM,eAAe,CAAC;CAC7B;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,EAAE,GAAG,SAAS,CAAC;CAChB;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,KAAK,GAAG,SAAS,CAAC;AACnB;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;CAC7B,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;CACvB,EAAE;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE;CACrB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;CAC9B,GAAG,OAAO,IAAI,CAAC;CACf,GAAG;CACH,EAAE,MAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;CAC9E,EAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;CAC3B,EAAE,OAAO,MAAM;CACf,GAAG,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC7C,GAAG,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;CAChD,GAAG,CAAC;CACJ,EAAE;AACF;CACA;CACA;CACA;CACA;CACA,CAAC,IAAI,CAAC,KAAK,EAAE;CACb,EAAE,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;CACtC,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;CAC7B,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;CACrB,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,GAAG,KAAK,CAAC;CAC9B,GAAG;CACH,EAAE;CACF,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACA;;CCrgBA;AACA;CACA;CACA;CACA;CACA;CACA;CACA;CACO,MAAM,OAAO,GAAG,OAAO,CAAC;CACxB,MAAM,cAAc,GAAG,GAAG;;CCOjC;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE;CAC3C,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;CAChG,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE;CACzC,CAAC,YAAY,CAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;CACnD,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;CACtB,CAAC;AAWD;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;CACjD,CAAC,YAAY,CAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;CAC3D,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;CAC9B,CAAC;AAWD;CACA;CACA;CACA;CACA;CACO,SAAS,UAAU,CAAC,IAAI,EAAE;CACjC,CAAC,YAAY,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;CAC3C,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;CACd,CAAC;AAgCD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,UAAU;CAC1B,CAAC,IAAI;CACL,CAAC,KAAK;CACN,CAAC,OAAO;CACR,CAAC,OAAO;CACR,CAAC,mBAAmB;CACpB,CAAC,oBAAoB;CACrB,CAAC,8BAA8B;CAC/B,EAAE;CACF,CAAC,MAAM,SAAS;CAChB,EAAE,OAAO,KAAK,IAAI,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;CACnF,CAAC,IAAI,mBAAmB,EAAE,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;CAC3D,CAAC,IAAI,oBAAoB,EAAE,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;CAC7D,CAAC,IAAI,8BAA8B,EAAE,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;CAChF,CAAC,YAAY,CAAC,2BAA2B,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;CAChF,CAAC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;CACvD,CAAC,OAAO,MAAM;CACd,EAAE,YAAY,CAAC,8BAA8B,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;CACpF,EAAE,OAAO,EAAE,CAAC;CACZ,EAAE,CAAC;CACH,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CACjD,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;CAC9B,CAAC,IAAI,KAAK,IAAI,IAAI,EAAE,YAAY,CAAC,0BAA0B,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;CAClF,MAAM,YAAY,CAAC,uBAAuB,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;CACxE,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE;CAChD,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;CACxB,CAAC,YAAY,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;CACjE,CAAC;AAYD;CACA;CACA;CACA;CACA;CACA;CACO,SAAS,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE;CACzC,CAAC,IAAI,GAAG,EAAE,GAAG,IAAI,CAAC;CAClB,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE,OAAO;CAChC,CAAC,YAAY,CAAC,kBAAkB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;CACxD,CAAC,IAAI,CAAC,IAAI,0BAA0B,IAAI,CAAC,CAAC;CAC1C,CAAC;AA2BD;CACO,SAAS,qBAAqB,CAAC,GAAG,EAAE;CAC3C,CAAC;CACD,EAAE,OAAO,GAAG,KAAK,QAAQ;CACzB,EAAE,EAAE,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,QAAQ,IAAI,GAAG,CAAC;CACtD,EAAE,EAAE,OAAO,MAAM,KAAK,UAAU,IAAI,GAAG,IAAI,MAAM,CAAC,QAAQ,IAAI,GAAG,CAAC;CAClE,GAAG;CACH,EAAE,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;CAC9D,EAAE;CACF,CAAC,OAAO,iBAAiB,CAAC,GAAG,CAAC,CAAC;CAC/B,CAAC;AACD;CACA;CACA;CACO,SAAS,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;CACjD,CAAC,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;CAC3C,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;CAChC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,+BAA+B,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;CACxE,GAAG;CACH,EAAE;CACF,CAAC;AAwCD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACO,MAAM,kBAAkB,SAAS,eAAe,CAAC;CACxD;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,UAAU,CAAC;CACZ;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,YAAY,CAAC;CACd;CACA;CACA;CACA;CACA;CACA;CACA;CACA,CAAC,UAAU,CAAC;AACZ;CACA;CACA,CAAC,WAAW,CAAC,OAAO,EAAE;CACtB,EAAE,IAAI,CAAC,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;CAC1D,GAAG,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;CACpD,GAAG;CACH,EAAE,KAAK,EAAE,CAAC;CACV,EAAE;AACF;CACA;CACA,CAAC,QAAQ,GAAG;CACZ,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC;CACnB,EAAE,IAAI,CAAC,QAAQ,GAAG,MAAM;CACxB,GAAG,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;CACnD,GAAG,CAAC;CACJ,EAAE;AACF;CACA;CACA,CAAC,cAAc,GAAG,EAAE;AACpB;CACA;CACA,CAAC,aAAa,GAAG,EAAE;CACnB;;CCxVA,IAAI,OAAO,MAAM,KAAK,WAAW;CACjC;CACA,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE,IAAI,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC;;;;;;;;;;;;;;2BCyCtD,GAAM,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA;;;;;;;kCAAf,GAAM,CAAA,CAAA,CAAA,CAAA;;;;;IAArB,UAAwC,CAAA,MAAA,EAAA,QAAA,EAAA,MAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDADlC,GAAO,CAAA,CAAA,CAAA,CAAA,CAAA;;;iCAAZ,MAAI,EAAA,CAAA,IAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAmBD,GAAM,CAAA,CAAA,CAAA,CAAA,CAAA;;;CA1BiD,GAAA,KAAA,CAAA,QAAA,GAAA,oBAAA,sBAAA,GAAc,OAAI,EAAE,CAAA;;;;;;;;2BAK7D,GAAc,CAAA,CAAA,CAAA,KAAA,KAAA,CAAA,EAAA,mBAAA,CAAA,gCAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;IARlC,UAAyB,CAAA,MAAA,EAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;IAEzB,UAEO,CAAA,MAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAAA;IADN,UAAoF,CAAA,KAAA,EAAA,KAAA,CAAA,CAAA;sCAAjE,GAAM,CAAA,CAAA,CAAA,CAAA,CAAA;;IAG1B,UAA2B,CAAA,MAAA,EAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;IAE3B,UAKS,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,CAAA,CAAA;IAJR,UAAoD,CAAA,MAAA,EAAA,QAAA,CAAA,CAAA;;;;;;;;6CADjC,GAAc,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,CAAA;;IAOlC,UAAgB,CAAA,MAAA,EAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;IAEhB,UAEO,CAAA,MAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAAA;IADN,UAAwG,CAAA,KAAA,EAAA,QAAA,CAAA,CAAA;uCAAlE,GAAI,CAAA,CAAA,CAAA,CAAA,CAAA;;IAG3C,UAAkB,CAAA,MAAA,EAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;IAElB,UAIC,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,CAAA,CAAA;;IAED,UAAmB,CAAA,MAAA,EAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;;;;;;;;oCAXoC,cAAc,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,CAAA;;;;;;;;;CAfR,GAAA,IAAA,KAAA,+BAAA,EAAA,IAAA,oBAAA,MAAA,oBAAA,sBAAA,GAAc,OAAI,EAAE,CAAA,EAAA;;;;2DAA7D,GAAM,CAAA,CAAA,CAAA,EAAA;uCAAN,GAAM,CAAA,CAAA,CAAA,CAAA,CAAA;;;;oDAOlB,GAAO,CAAA,CAAA,CAAA,CAAA,CAAA;;;gCAAZ,MAAI,EAAA,CAAA,IAAA,CAAA,EAAA;;;;;;;;;;;;;;;;qCAAJ,MAAI,CAAA;;;;8CAFa,GAAc,CAAA,CAAA,CAAA,CAAA,CAAA;;;;wCAUK,GAAI,CAAA,CAAA,CAAA,CAAA,CAAA;;;2DAWrC,GAAM,CAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA9DN,MAAA,SAAS,GAAG,GAAG,CAAA;;;CAOZ,SAAA,cAAc,CAAC,KAAK,EAAA;MACrB,MAAM,CAAA;;MACN,KAAK,EAAA;GACL,MAAM,GAAG,KAAK,CAAC,MAAM,CAAA;;;CAIrB,EAAA,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAA,CAAA;;;OAE5C,MAAM,EAAA,OAAA;CAEX,CAAA,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAA;CAC5B,CAAA,MAAM,CAAC,KAAK,CAAC,MAAM,GAAM,CAAA,EAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAA,CAAA,EAAA,CAAA,CAAA;;;;;;;;;;;;;;CAlBhE,CAAA,IAAA,MAAM,GAAG,EAAE,CAAA;CACX,CAAA,IAAA,MAAM,GAAG,EAAE,CAAA;CACX,CAAA,IAAA,IAAI,GAAG,EAAE,CAAA;CACT,CAAA,IAAA,cAAc,GAAG,EAAE,CAAA;CACjB,CAAA,MAAA,OAAO,GAAI,CAAA,YAAY,EAAE,YAAY,EAAE,aAAa,CAAA,CAAA;;;CAiB1D,CAAA,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAG,KAAK,IAAA;SAC/B,OAAO,GAAG,KAAK,CAAC,IAAI,CAAA;;CAClB,EAAA,QAAA,OAAO,CAAC,OAAO;SACd,SAAS;qBACV,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA,CAAA;KACnB,UAAU,CAAC,cAAc,EAAE,CAAC,CAAA,CAAA;;;;;;;;;;;;GASpB,MAAM,GAAA,IAAA,CAAA,KAAA,CAAA;;;;;GAKN,cAAc,GAAA,YAAA,CAAA,IAAA,CAAA,CAAA;;;;;;GAUK,IAAI,GAAA,IAAA,CAAA,KAAA,CAAA;;;;;CAOzC,EAAA,YAAA,CAAA,CAAA,EAAA,MAAM,GAAG,+BAA+B,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzD1C,OAAM,GAAG,GAAG,IAAIA,OAAG,CAAC;KAClB,MAAM,EAAE,QAAQ,CAAC,IAAI;CACtB,CAAA;;;;;;;;"}
=======
{"version":3,"file":"sidebar.js","sources":["../../node_modules/svelte/src/runtime/internal/utils.js","../../node_modules/svelte/src/runtime/internal/dom.js","../../node_modules/svelte/src/runtime/internal/lifecycle.js","../../node_modules/svelte/src/runtime/internal/scheduler.js","../../node_modules/svelte/src/runtime/internal/transitions.js","../../node_modules/svelte/src/runtime/internal/each.js","../../node_modules/svelte/src/runtime/internal/Component.js","../../node_modules/svelte/src/shared/version.js","../../node_modules/svelte/src/runtime/internal/dev.js","../../node_modules/svelte/src/runtime/internal/disclose-version/index.js","../../webviews/components/Sidebar.svelte","../../webviews/pages/sidebar.ts"],"sourcesContent":["/** @returns {void} */\nexport function noop() {}\n\nexport const identity = (x) => x;\n\n/**\n * @template T\n * @template S\n * @param {T} tar\n * @param {S} src\n * @returns {T & S}\n */\nexport function assign(tar, src) {\n\t// @ts-ignore\n\tfor (const k in src) tar[k] = src[k];\n\treturn /** @type {T & S} */ (tar);\n}\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n/**\n * @param {any} value\n * @returns {value is PromiseLike<any>}\n */\nexport function is_promise(value) {\n\treturn (\n\t\t!!value &&\n\t\t(typeof value === 'object' || typeof value === 'function') &&\n\t\ttypeof (/** @type {any} */ (value).then) === 'function'\n\t);\n}\n\n/** @returns {void} */\nexport function add_location(element, file, line, column, char) {\n\telement.__svelte_meta = {\n\t\tloc: { file, line, column, char }\n\t};\n}\n\nexport function run(fn) {\n\treturn fn();\n}\n\nexport function blank_object() {\n\treturn Object.create(null);\n}\n\n/**\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function run_all(fns) {\n\tfns.forEach(run);\n}\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\n/** @returns {boolean} */\nexport function safe_not_equal(a, b) {\n\treturn a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';\n}\n\nlet src_url_equal_anchor;\n\n/**\n * @param {string} element_src\n * @param {string} url\n * @returns {boolean}\n */\nexport function src_url_equal(element_src, url) {\n\tif (element_src === url) return true;\n\tif (!src_url_equal_anchor) {\n\t\tsrc_url_equal_anchor = document.createElement('a');\n\t}\n\t// This is actually faster than doing URL(..).href\n\tsrc_url_equal_anchor.href = url;\n\treturn element_src === src_url_equal_anchor.href;\n}\n\n/** @param {string} srcset */\nfunction split_srcset(srcset) {\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\n}\n\n/**\n * @param {HTMLSourceElement | HTMLImageElement} element_srcset\n * @param {string | undefined | null} srcset\n * @returns {boolean}\n */\nexport function srcset_url_equal(element_srcset, srcset) {\n\tconst element_urls = split_srcset(element_srcset.srcset);\n\tconst urls = split_srcset(srcset || '');\n\n\treturn (\n\t\turls.length === element_urls.length &&\n\t\turls.every(\n\t\t\t([url, width], i) =>\n\t\t\t\twidth === element_urls[i][1] &&\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\n\t\t\t\t// contain relative or absolute URLs.\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\n\t\t)\n\t);\n}\n\n/** @returns {boolean} */\nexport function not_equal(a, b) {\n\treturn a != a ? b == b : a !== b;\n}\n\n/** @returns {boolean} */\nexport function is_empty(obj) {\n\treturn Object.keys(obj).length === 0;\n}\n\n/** @returns {void} */\nexport function validate_store(store, name) {\n\tif (store != null && typeof store.subscribe !== 'function') {\n\t\tthrow new Error(`'${name}' is not a store with a 'subscribe' method`);\n\t}\n}\n\nexport function subscribe(store, ...callbacks) {\n\tif (store == null) {\n\t\tfor (const callback of callbacks) {\n\t\t\tcallback(undefined);\n\t\t}\n\t\treturn noop;\n\t}\n\tconst unsub = store.subscribe(...callbacks);\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\n\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n *\n * https://svelte.dev/docs/svelte-store#get\n * @template T\n * @param {import('../store/public.js').Readable<T>} store\n * @returns {T}\n */\nexport function get_store_value(store) {\n\tlet value;\n\tsubscribe(store, (_) => (value = _))();\n\treturn value;\n}\n\n/** @returns {void} */\nexport function component_subscribe(component, store, callback) {\n\tcomponent.$$.on_destroy.push(subscribe(store, callback));\n}\n\nexport function create_slot(definition, ctx, $$scope, fn) {\n\tif (definition) {\n\t\tconst slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n\t\treturn definition[0](slot_ctx);\n\t}\n}\n\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n\treturn definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;\n}\n\nexport function get_slot_changes(definition, $$scope, dirty, fn) {\n\tif (definition[2] && fn) {\n\t\tconst lets = definition[2](fn(dirty));\n\t\tif ($$scope.dirty === undefined) {\n\t\t\treturn lets;\n\t\t}\n\t\tif (typeof lets === 'object') {\n\t\t\tconst merged = [];\n\t\t\tconst len = Math.max($$scope.dirty.length, lets.length);\n\t\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\t\tmerged[i] = $$scope.dirty[i] | lets[i];\n\t\t\t}\n\t\t\treturn merged;\n\t\t}\n\t\treturn $$scope.dirty | lets;\n\t}\n\treturn $$scope.dirty;\n}\n\n/** @returns {void} */\nexport function update_slot_base(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tslot_changes,\n\tget_slot_context_fn\n) {\n\tif (slot_changes) {\n\t\tconst slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n\t\tslot.p(slot_context, slot_changes);\n\t}\n}\n\n/** @returns {void} */\nexport function update_slot(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tdirty,\n\tget_slot_changes_fn,\n\tget_slot_context_fn\n) {\n\tconst slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n\tupdate_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\n\n/** @returns {any[] | -1} */\nexport function get_all_dirty_from_scope($$scope) {\n\tif ($$scope.ctx.length > 32) {\n\t\tconst dirty = [];\n\t\tconst length = $$scope.ctx.length / 32;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tdirty[i] = -1;\n\t\t}\n\t\treturn dirty;\n\t}\n\treturn -1;\n}\n\n/** @returns {{}} */\nexport function exclude_internal_props(props) {\n\tconst result = {};\n\tfor (const k in props) if (k[0] !== '$') result[k] = props[k];\n\treturn result;\n}\n\n/** @returns {{}} */\nexport function compute_rest_props(props, keys) {\n\tconst rest = {};\n\tkeys = new Set(keys);\n\tfor (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];\n\treturn rest;\n}\n\n/** @returns {{}} */\nexport function compute_slots(slots) {\n\tconst result = {};\n\tfor (const key in slots) {\n\t\tresult[key] = true;\n\t}\n\treturn result;\n}\n\n/** @returns {(this: any, ...args: any[]) => void} */\nexport function once(fn) {\n\tlet ran = false;\n\treturn function (...args) {\n\t\tif (ran) return;\n\t\tran = true;\n\t\tfn.call(this, ...args);\n\t};\n}\n\nexport function null_to_empty(value) {\n\treturn value == null ? '' : value;\n}\n\nexport function set_store_value(store, ret, value) {\n\tstore.set(value);\n\treturn ret;\n}\n\nexport const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\nexport function action_destroyer(action_result) {\n\treturn action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\n/** @param {number | string} value\n * @returns {[number, string]}\n */\nexport function split_css_unit(value) {\n\tconst split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n\treturn split ? [parseFloat(split[1]), split[2] || 'px'] : [/** @type {number} */ (value), 'px'];\n}\n\nexport const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n","import { contenteditable_truthy_values, has_prop } from './utils.js';\n\nimport { ResizeObserverSingleton } from './ResizeObserverSingleton.js';\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\n\n/**\n * @returns {void}\n */\nexport function start_hydrating() {\n\tis_hydrating = true;\n}\n\n/**\n * @returns {void}\n */\nexport function end_hydrating() {\n\tis_hydrating = false;\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {(index: number) => number} key\n * @param {number} value\n * @returns {number}\n */\nfunction upper_bound(low, high, key, value) {\n\t// Return first index of value larger than input value in the range [low, high)\n\twhile (low < high) {\n\t\tconst mid = low + ((high - low) >> 1);\n\t\tif (key(mid) <= value) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\n\n/**\n * @param {NodeEx} target\n * @returns {void}\n */\nfunction init_hydrate(target) {\n\tif (target.hydrate_init) return;\n\ttarget.hydrate_init = true;\n\t// We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n\n\tlet children = /** @type {ArrayLike<NodeEx2>} */ (target.childNodes);\n\t// If target is <head>, there may be children without claim_order\n\tif (target.nodeName === 'HEAD') {\n\t\tconst my_children = [];\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\tconst node = children[i];\n\t\t\tif (node.claim_order !== undefined) {\n\t\t\t\tmy_children.push(node);\n\t\t\t}\n\t\t}\n\t\tchildren = my_children;\n\t}\n\t/*\n\t * Reorder claimed children optimally.\n\t * We can reorder claimed children optimally by finding the longest subsequence of\n\t * nodes that are already claimed in order and only moving the rest. The longest\n\t * subsequence of nodes that are claimed in order can be found by\n\t * computing the longest increasing subsequence of .claim_order values.\n\t *\n\t * This algorithm is optimal in generating the least amount of reorder operations\n\t * possible.\n\t *\n\t * Proof:\n\t * We know that, given a set of reordering operations, the nodes that do not move\n\t * always form an increasing subsequence, since they do not move among each other\n\t * meaning that they must be already ordered among each other. Thus, the maximal\n\t * set of nodes that do not move form a longest increasing subsequence.\n\t */\n\t// Compute longest increasing subsequence\n\t// m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n\tconst m = new Int32Array(children.length + 1);\n\t// Predecessor indices + 1\n\tconst p = new Int32Array(children.length);\n\tm[0] = -1;\n\tlet longest = 0;\n\tfor (let i = 0; i < children.length; i++) {\n\t\tconst current = children[i].claim_order;\n\t\t// Find the largest subsequence length such that it ends in a value less than our current value\n\t\t// upper_bound returns first greater value, so we subtract one\n\t\t// with fast path for when we are on the current longest subsequence\n\t\tconst seq_len =\n\t\t\t(longest > 0 && children[m[longest]].claim_order <= current\n\t\t\t\t? longest + 1\n\t\t\t\t: upper_bound(1, longest, (idx) => children[m[idx]].claim_order, current)) - 1;\n\t\tp[i] = m[seq_len] + 1;\n\t\tconst new_len = seq_len + 1;\n\t\t// We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n\t\tm[new_len] = i;\n\t\tlongest = Math.max(new_len, longest);\n\t}\n\t// The longest increasing subsequence of nodes (initially reversed)\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst lis = [];\n\t// The rest of the nodes, nodes that will be moved\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst to_move = [];\n\tlet last = children.length - 1;\n\tfor (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n\t\tlis.push(children[cur - 1]);\n\t\tfor (; last >= cur; last--) {\n\t\t\tto_move.push(children[last]);\n\t\t}\n\t\tlast--;\n\t}\n\tfor (; last >= 0; last--) {\n\t\tto_move.push(children[last]);\n\t}\n\tlis.reverse();\n\t// We sort the nodes being moved to guarantee that their insertion order matches the claim order\n\tto_move.sort((a, b) => a.claim_order - b.claim_order);\n\t// Finally, we move the nodes\n\tfor (let i = 0, j = 0; i < to_move.length; i++) {\n\t\twhile (j < lis.length && to_move[i].claim_order >= lis[j].claim_order) {\n\t\t\tj++;\n\t\t}\n\t\tconst anchor = j < lis.length ? lis[j] : null;\n\t\ttarget.insertBefore(to_move[i], anchor);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append(target, node) {\n\ttarget.appendChild(node);\n}\n\n/**\n * @param {Node} target\n * @param {string} style_sheet_id\n * @param {string} styles\n * @returns {void}\n */\nexport function append_styles(target, style_sheet_id, styles) {\n\tconst append_styles_to = get_root_for_style(target);\n\tif (!append_styles_to.getElementById(style_sheet_id)) {\n\t\tconst style = element('style');\n\t\tstyle.id = style_sheet_id;\n\t\tstyle.textContent = styles;\n\t\tappend_stylesheet(append_styles_to, style);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {ShadowRoot | Document}\n */\nexport function get_root_for_style(node) {\n\tif (!node) return document;\n\tconst root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n\tif (root && /** @type {ShadowRoot} */ (root).host) {\n\t\treturn /** @type {ShadowRoot} */ (root);\n\t}\n\treturn node.ownerDocument;\n}\n\n/**\n * @param {Node} node\n * @returns {CSSStyleSheet}\n */\nexport function append_empty_stylesheet(node) {\n\tconst style_element = element('style');\n\t// For transitions to work without 'style-src: unsafe-inline' Content Security Policy,\n\t// these empty tags need to be allowed with a hash as a workaround until we move to the Web Animations API.\n\t// Using the hash for the empty string (for an empty tag) works in all browsers except Safari.\n\t// So as a workaround for the workaround, when we append empty style tags we set their content to /* empty */.\n\t// The hash 'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=' will then work even in Safari.\n\tstyle_element.textContent = '/* empty */';\n\tappend_stylesheet(get_root_for_style(node), style_element);\n\treturn style_element.sheet;\n}\n\n/**\n * @param {ShadowRoot | Document} node\n * @param {HTMLStyleElement} style\n * @returns {CSSStyleSheet}\n */\nfunction append_stylesheet(node, style) {\n\tappend(/** @type {Document} */ (node).head || node, style);\n\treturn style.sheet;\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @returns {void}\n */\nexport function append_hydration(target, node) {\n\tif (is_hydrating) {\n\t\tinit_hydrate(target);\n\t\tif (\n\t\t\ttarget.actual_end_child === undefined ||\n\t\t\t(target.actual_end_child !== null && target.actual_end_child.parentNode !== target)\n\t\t) {\n\t\t\ttarget.actual_end_child = target.firstChild;\n\t\t}\n\t\t// Skip nodes of undefined ordering\n\t\twhile (target.actual_end_child !== null && target.actual_end_child.claim_order === undefined) {\n\t\t\ttarget.actual_end_child = target.actual_end_child.nextSibling;\n\t\t}\n\t\tif (node !== target.actual_end_child) {\n\t\t\t// We only insert if the ordering of this node should be modified or the parent node is not target\n\t\t\tif (node.claim_order !== undefined || node.parentNode !== target) {\n\t\t\t\ttarget.insertBefore(node, target.actual_end_child);\n\t\t\t}\n\t\t} else {\n\t\t\ttarget.actual_end_child = node.nextSibling;\n\t\t}\n\t} else if (node.parentNode !== target || node.nextSibling !== null) {\n\t\ttarget.appendChild(node);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert(target, node, anchor) {\n\ttarget.insertBefore(node, anchor || null);\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @param {NodeEx} [anchor]\n * @returns {void}\n */\nexport function insert_hydration(target, node, anchor) {\n\tif (is_hydrating && !anchor) {\n\t\tappend_hydration(target, node);\n\t} else if (node.parentNode !== target || node.nextSibling != anchor) {\n\t\ttarget.insertBefore(node, anchor || null);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {void}\n */\nexport function detach(node) {\n\tif (node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function destroy_each(iterations, detaching) {\n\tfor (let i = 0; i < iterations.length; i += 1) {\n\t\tif (iterations[i]) iterations[i].d(detaching);\n\t}\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element(name) {\n\treturn document.createElement(name);\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @param {string} is\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element_is(name, is) {\n\treturn document.createElement(name, { is });\n}\n\n/**\n * @template T\n * @template {keyof T} K\n * @param {T} obj\n * @param {K[]} exclude\n * @returns {Pick<T, Exclude<keyof T, K>>}\n */\nexport function object_without_properties(obj, exclude) {\n\tconst target = /** @type {Pick<T, Exclude<keyof T, K>>} */ ({});\n\tfor (const k in obj) {\n\t\tif (\n\t\t\thas_prop(obj, k) &&\n\t\t\t// @ts-ignore\n\t\t\texclude.indexOf(k) === -1\n\t\t) {\n\t\t\t// @ts-ignore\n\t\t\ttarget[k] = obj[k];\n\t\t}\n\t}\n\treturn target;\n}\n\n/**\n * @template {keyof SVGElementTagNameMap} K\n * @param {K} name\n * @returns {SVGElement}\n */\nexport function svg_element(name) {\n\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\n}\n\n/**\n * @param {string} data\n * @returns {Text}\n */\nexport function text(data) {\n\treturn document.createTextNode(data);\n}\n\n/**\n * @returns {Text} */\nexport function space() {\n\treturn text(' ');\n}\n\n/**\n * @returns {Text} */\nexport function empty() {\n\treturn text('');\n}\n\n/**\n * @param {string} content\n * @returns {Comment}\n */\nexport function comment(content) {\n\treturn document.createComment(content);\n}\n\n/**\n * @param {EventTarget} node\n * @param {string} event\n * @param {EventListenerOrEventListenerObject} handler\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\n * @returns {() => void}\n */\nexport function listen(node, event, handler, options) {\n\tnode.addEventListener(event, handler, options);\n\treturn () => node.removeEventListener(event, handler, options);\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function prevent_default(fn) {\n\treturn function (event) {\n\t\tevent.preventDefault();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopPropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_immediate_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopImmediatePropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function self(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.target === this) fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function trusted(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.isTrusted) fn.call(this, event);\n\t};\n}\n\n/**\n * @param {Element} node\n * @param {string} attribute\n * @param {string} [value]\n * @returns {void}\n */\nexport function attr(node, attribute, value) {\n\tif (value == null) node.removeAttribute(attribute);\n\telse if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_attributes(node, attributes) {\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n\tfor (const key in attributes) {\n\t\tif (attributes[key] == null) {\n\t\t\tnode.removeAttribute(key);\n\t\t} else if (key === 'style') {\n\t\t\tnode.style.cssText = attributes[key];\n\t\t} else if (key === '__value') {\n\t\t\t/** @type {any} */ (node).value = node[key] = attributes[key];\n\t\t} else if (\n\t\t\tdescriptors[key] &&\n\t\t\tdescriptors[key].set &&\n\t\t\talways_set_through_set_attribute.indexOf(key) === -1\n\t\t) {\n\t\t\tnode[key] = attributes[key];\n\t\t} else {\n\t\t\tattr(node, key, attributes[key]);\n\t\t}\n\t}\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_svg_attributes(node, attributes) {\n\tfor (const key in attributes) {\n\t\tattr(node, key, attributes[key]);\n\t}\n}\n\n/**\n * @param {Record<string, unknown>} data_map\n * @returns {void}\n */\nexport function set_custom_element_data_map(node, data_map) {\n\tObject.keys(data_map).forEach((key) => {\n\t\tset_custom_element_data(node, key, data_map[key]);\n\t});\n}\n\n/**\n * @returns {void} */\nexport function set_custom_element_data(node, prop, value) {\n\tconst lower = prop.toLowerCase(); // for backwards compatibility with existing behavior we do lowercase first\n\tif (lower in node) {\n\t\tnode[lower] = typeof node[lower] === 'boolean' && value === '' ? true : value;\n\t} else if (prop in node) {\n\t\tnode[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n\t} else {\n\t\tattr(node, prop, value);\n\t}\n}\n\n/**\n * @param {string} tag\n */\nexport function set_dynamic_element_data(tag) {\n\treturn /-/.test(tag) ? set_custom_element_data_map : set_attributes;\n}\n\n/**\n * @returns {void}\n */\nexport function xlink_attr(node, attribute, value) {\n\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\n\n/**\n * @param {HTMLElement} node\n * @returns {string}\n */\nexport function get_svelte_dataset(node) {\n\treturn node.dataset.svelteH;\n}\n\n/**\n * @returns {unknown[]} */\nexport function get_binding_group_value(group, __value, checked) {\n\tconst value = new Set();\n\tfor (let i = 0; i < group.length; i += 1) {\n\t\tif (group[i].checked) value.add(group[i].__value);\n\t}\n\tif (!checked) {\n\t\tvalue.delete(__value);\n\t}\n\treturn Array.from(value);\n}\n\n/**\n * @param {HTMLInputElement[]} group\n * @returns {{ p(...inputs: HTMLInputElement[]): void; r(): void; }}\n */\nexport function init_binding_group(group) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\treturn {\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\t_inputs.forEach((input) => group.push(input));\n\t\t},\n\t\t/* remove */ r() {\n\t\t\t_inputs.forEach((input) => group.splice(group.indexOf(input), 1));\n\t\t}\n\t};\n}\n\n/**\n * @param {number[]} indexes\n * @returns {{ u(new_indexes: number[]): void; p(...inputs: HTMLInputElement[]): void; r: () => void; }}\n */\nexport function init_binding_group_dynamic(group, indexes) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _group = get_binding_group(group);\n\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\n\tfunction get_binding_group(group) {\n\t\tfor (let i = 0; i < indexes.length; i++) {\n\t\t\tgroup = group[indexes[i]] = group[indexes[i]] || [];\n\t\t}\n\t\treturn group;\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction push() {\n\t\t_inputs.forEach((input) => _group.push(input));\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction remove() {\n\t\t_inputs.forEach((input) => _group.splice(_group.indexOf(input), 1));\n\t}\n\treturn {\n\t\t/* update */ u(new_indexes) {\n\t\t\tindexes = new_indexes;\n\t\t\tconst new_group = get_binding_group(group);\n\t\t\tif (new_group !== _group) {\n\t\t\t\tremove();\n\t\t\t\t_group = new_group;\n\t\t\t\tpush();\n\t\t\t}\n\t\t},\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\tpush();\n\t\t},\n\t\t/* remove */ r: remove\n\t};\n}\n\n/** @returns {number} */\nexport function to_number(value) {\n\treturn value === '' ? null : +value;\n}\n\n/** @returns {any[]} */\nexport function time_ranges_to_array(ranges) {\n\tconst array = [];\n\tfor (let i = 0; i < ranges.length; i += 1) {\n\t\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\n\t}\n\treturn array;\n}\n\n/**\n * @param {Element} element\n * @returns {ChildNode[]}\n */\nexport function children(element) {\n\treturn Array.from(element.childNodes);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {void}\n */\nfunction init_claim_info(nodes) {\n\tif (nodes.claim_info === undefined) {\n\t\tnodes.claim_info = { last_index: 0, total_claimed: 0 };\n\t}\n}\n\n/**\n * @template {ChildNodeEx} R\n * @param {ChildNodeArray} nodes\n * @param {(node: ChildNodeEx) => node is R} predicate\n * @param {(node: ChildNodeEx) => ChildNodeEx | undefined} process_node\n * @param {() => R} create_node\n * @param {boolean} dont_update_last_index\n * @returns {R}\n */\nfunction claim_node(nodes, predicate, process_node, create_node, dont_update_last_index = false) {\n\t// Try to find nodes in an order such that we lengthen the longest increasing subsequence\n\tinit_claim_info(nodes);\n\tconst result_node = (() => {\n\t\t// We first try to find an element after the previous one\n\t\tfor (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// Otherwise, we try to find one before\n\t\t// We iterate in reverse so that we don't go too far back\n\t\tfor (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t} else if (replacement === undefined) {\n\t\t\t\t\t// Since we spliced before the last_index, we decrease it\n\t\t\t\t\tnodes.claim_info.last_index--;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// If we can't find any matching node, we create a new one\n\t\treturn create_node();\n\t})();\n\tresult_node.claim_order = nodes.claim_info.total_claimed;\n\tnodes.claim_info.total_claimed += 1;\n\treturn result_node;\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @param {(name: string) => Element | SVGElement} create_element\n * @returns {Element | SVGElement}\n */\nfunction claim_element_base(nodes, name, attributes, create_element) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Element | SVGElement} */\n\t\t(node) => node.nodeName === name,\n\t\t/** @param {Element} node */\n\t\t(node) => {\n\t\t\tconst remove = [];\n\t\t\tfor (let j = 0; j < node.attributes.length; j++) {\n\t\t\t\tconst attribute = node.attributes[j];\n\t\t\t\tif (!attributes[attribute.name]) {\n\t\t\t\t\tremove.push(attribute.name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tremove.forEach((v) => node.removeAttribute(v));\n\t\t\treturn undefined;\n\t\t},\n\t\t() => create_element(name)\n\t);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_svg_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, svg_element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Text}\n */\nexport function claim_text(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Text} */\n\t\t(node) => node.nodeType === 3,\n\t\t/** @param {Text} node */\n\t\t(node) => {\n\t\t\tconst data_str = '' + data;\n\t\t\tif (node.data.startsWith(data_str)) {\n\t\t\t\tif (node.data.length !== data_str.length) {\n\t\t\t\t\treturn node.splitText(data_str.length);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode.data = data_str;\n\t\t\t}\n\t\t},\n\t\t() => text(data),\n\t\ttrue // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n\t);\n}\n\n/**\n * @returns {Text} */\nexport function claim_space(nodes) {\n\treturn claim_text(nodes, ' ');\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Comment}\n */\nexport function claim_comment(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Comment} */\n\t\t(node) => node.nodeType === 8,\n\t\t/** @param {Comment} node */\n\t\t(node) => {\n\t\t\tnode.data = '' + data;\n\t\t\treturn undefined;\n\t\t},\n\t\t() => comment(data),\n\t\ttrue\n\t);\n}\n\nfunction get_comment_idx(nodes, text, start) {\n\tfor (let i = start; i < nodes.length; i += 1) {\n\t\tconst node = nodes[i];\n\t\tif (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * @param {boolean} is_svg\n * @returns {HtmlTagHydration}\n */\nexport function claim_html_tag(nodes, is_svg) {\n\t// find html opening tag\n\tconst start_index = get_comment_idx(nodes, 'HTML_TAG_START', 0);\n\tconst end_index = get_comment_idx(nodes, 'HTML_TAG_END', start_index + 1);\n\tif (start_index === -1 || end_index === -1) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\n\tinit_claim_info(nodes);\n\tconst html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n\tdetach(html_tag_nodes[0]);\n\tdetach(html_tag_nodes[html_tag_nodes.length - 1]);\n\tconst claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n\tif (claimed_nodes.length === 0) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\tfor (const n of claimed_nodes) {\n\t\tn.claim_order = nodes.claim_info.total_claimed;\n\t\tnodes.claim_info.total_claimed += 1;\n\t}\n\treturn new HtmlTagHydration(is_svg, claimed_nodes);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data(text, data) {\n\tdata = '' + data;\n\tif (text.data === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_contenteditable(text, data) {\n\tdata = '' + data;\n\tif (text.wholeText === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @param {string} attr_value\n * @returns {void}\n */\nexport function set_data_maybe_contenteditable(text, data, attr_value) {\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\n\t\tset_data_contenteditable(text, data);\n\t} else {\n\t\tset_data(text, data);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_input_value(input, value) {\n\tinput.value = value == null ? '' : value;\n}\n\n/**\n * @returns {void} */\nexport function set_input_type(input, type) {\n\ttry {\n\t\tinput.type = type;\n\t} catch (e) {\n\t\t// do nothing\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_style(node, key, value, important) {\n\tif (value == null) {\n\t\tnode.style.removeProperty(key);\n\t} else {\n\t\tnode.style.setProperty(key, value, important ? 'important' : '');\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_option(select, value, mounting) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\tif (option.__value === value) {\n\t\t\toption.selected = true;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (!mounting || value !== undefined) {\n\t\tselect.selectedIndex = -1; // no option should be selected\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_options(select, value) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\toption.selected = ~value.indexOf(option.__value);\n\t}\n}\n\nexport function select_value(select) {\n\tconst selected_option = select.querySelector(':checked');\n\treturn selected_option && selected_option.__value;\n}\n\nexport function select_multiple_value(select) {\n\treturn [].map.call(select.querySelectorAll(':checked'), (option) => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\n\n/**\n * @type {boolean} */\nlet crossorigin;\n\n/**\n * @returns {boolean} */\nexport function is_crossorigin() {\n\tif (crossorigin === undefined) {\n\t\tcrossorigin = false;\n\t\ttry {\n\t\t\tif (typeof window !== 'undefined' && window.parent) {\n\t\t\t\tvoid window.parent.document;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tcrossorigin = true;\n\t\t}\n\t}\n\treturn crossorigin;\n}\n\n/**\n * @param {HTMLElement} node\n * @param {() => void} fn\n * @returns {() => void}\n */\nexport function add_iframe_resize_listener(node, fn) {\n\tconst computed_style = getComputedStyle(node);\n\tif (computed_style.position === 'static') {\n\t\tnode.style.position = 'relative';\n\t}\n\tconst iframe = element('iframe');\n\tiframe.setAttribute(\n\t\t'style',\n\t\t'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n\t\t\t'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;'\n\t);\n\tiframe.setAttribute('aria-hidden', 'true');\n\tiframe.tabIndex = -1;\n\tconst crossorigin = is_crossorigin();\n\n\t/**\n\t * @type {() => void}\n\t */\n\tlet unsubscribe;\n\tif (crossorigin) {\n\t\tiframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n\t\tunsubscribe = listen(\n\t\t\twindow,\n\t\t\t'message',\n\t\t\t/** @param {MessageEvent} event */ (event) => {\n\t\t\t\tif (event.source === iframe.contentWindow) fn();\n\t\t\t}\n\t\t);\n\t} else {\n\t\tiframe.src = 'about:blank';\n\t\tiframe.onload = () => {\n\t\t\tunsubscribe = listen(iframe.contentWindow, 'resize', fn);\n\t\t\t// make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n\t\t\t// see https://github.com/sveltejs/svelte/issues/4233\n\t\t\tfn();\n\t\t};\n\t}\n\tappend(node, iframe);\n\treturn () => {\n\t\tif (crossorigin) {\n\t\t\tunsubscribe();\n\t\t} else if (unsubscribe && iframe.contentWindow) {\n\t\t\tunsubscribe();\n\t\t}\n\t\tdetach(iframe);\n\t};\n}\nexport const resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'content-box'\n});\nexport const resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'border-box'\n});\nexport const resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton(\n\t{ box: 'device-pixel-content-box' }\n);\nexport { ResizeObserverSingleton };\n\n/**\n * @returns {void} */\nexport function toggle_class(element, name, toggle) {\n\t// The `!!` is required because an `undefined` flag means flipping the current state.\n\telement.classList.toggle(name, !!toggle);\n}\n\n/**\n * @template T\n * @param {string} type\n * @param {T} [detail]\n * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]\n * @returns {CustomEvent<T>}\n */\nexport function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\n}\n\n/**\n * @param {string} selector\n * @param {HTMLElement} parent\n * @returns {ChildNodeArray}\n */\nexport function query_selector_all(selector, parent = document.body) {\n\treturn Array.from(parent.querySelectorAll(selector));\n}\n\n/**\n * @param {string} nodeId\n * @param {HTMLElement} head\n * @returns {any[]}\n */\nexport function head_selector(nodeId, head) {\n\tconst result = [];\n\tlet started = 0;\n\tfor (const node of head.childNodes) {\n\t\tif (node.nodeType === 8 /* comment node */) {\n\t\t\tconst comment = node.textContent.trim();\n\t\t\tif (comment === `HEAD_${nodeId}_END`) {\n\t\t\t\tstarted -= 1;\n\t\t\t\tresult.push(node);\n\t\t\t} else if (comment === `HEAD_${nodeId}_START`) {\n\t\t\t\tstarted += 1;\n\t\t\t\tresult.push(node);\n\t\t\t}\n\t\t} else if (started > 0) {\n\t\t\tresult.push(node);\n\t\t}\n\t}\n\treturn result;\n}\n/** */\nexport class HtmlTag {\n\t/**\n\t * @private\n\t * @default false\n\t */\n\tis_svg = false;\n\t/** parent for creating node */\n\te = undefined;\n\t/** html tag nodes */\n\tn = undefined;\n\t/** target */\n\tt = undefined;\n\t/** anchor */\n\ta = undefined;\n\tconstructor(is_svg = false) {\n\t\tthis.is_svg = is_svg;\n\t\tthis.e = this.n = null;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tthis.h(html);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @param {HTMLElement | SVGElement} target\n\t * @param {HTMLElement | SVGElement} anchor\n\t * @returns {void}\n\t */\n\tm(html, target, anchor = null) {\n\t\tif (!this.e) {\n\t\t\tif (this.is_svg)\n\t\t\t\tthis.e = svg_element(/** @type {keyof SVGElementTagNameMap} */ (target.nodeName));\n\t\t\t/** #7364  target for <template> may be provided as #document-fragment(11) */ else\n\t\t\t\tthis.e = element(\n\t\t\t\t\t/** @type {keyof HTMLElementTagNameMap} */ (\n\t\t\t\t\t\ttarget.nodeType === 11 ? 'TEMPLATE' : target.nodeName\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tthis.t =\n\t\t\t\ttarget.tagName !== 'TEMPLATE'\n\t\t\t\t\t? target\n\t\t\t\t\t: /** @type {HTMLTemplateElement} */ (target).content;\n\t\t\tthis.c(html);\n\t\t}\n\t\tthis.i(anchor);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\th(html) {\n\t\tthis.e.innerHTML = html;\n\t\tthis.n = Array.from(\n\t\t\tthis.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes\n\t\t);\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert(this.t, this.n[i], anchor);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tp(html) {\n\t\tthis.d();\n\t\tthis.h(html);\n\t\tthis.i(this.a);\n\t}\n\n\t/**\n\t * @returns {void} */\n\td() {\n\t\tthis.n.forEach(detach);\n\t}\n}\n\nexport class HtmlTagHydration extends HtmlTag {\n\t/** @type {Element[]} hydration claimed nodes */\n\tl = undefined;\n\n\tconstructor(is_svg = false, claimed_nodes) {\n\t\tsuper(is_svg);\n\t\tthis.e = this.n = null;\n\t\tthis.l = claimed_nodes;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tif (this.l) {\n\t\t\tthis.n = this.l;\n\t\t} else {\n\t\t\tsuper.c(html);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert_hydration(this.t, this.n[i], anchor);\n\t\t}\n\t}\n}\n\n/**\n * @param {NamedNodeMap} attributes\n * @returns {{}}\n */\nexport function attribute_to_object(attributes) {\n\tconst result = {};\n\tfor (const attribute of attributes) {\n\t\tresult[attribute.name] = attribute.value;\n\t}\n\treturn result;\n}\n\nconst escaped = {\n\t'\"': '&quot;',\n\t'&': '&amp;',\n\t'<': '&lt;'\n};\n\nconst regex_attribute_characters_to_escape = /[\"&<]/g;\n\n/**\n * Note that the attribute itself should be surrounded in double quotes\n * @param {any} attribute\n */\nfunction escape_attribute(attribute) {\n\treturn String(attribute).replace(regex_attribute_characters_to_escape, (match) => escaped[match]);\n}\n\n/**\n * @param {Record<string, string>} attributes\n */\nexport function stringify_spread(attributes) {\n\tlet str = ' ';\n\tfor (const key in attributes) {\n\t\tif (attributes[key] != null) {\n\t\t\tstr += `${key}=\"${escape_attribute(attributes[key])}\" `;\n\t\t}\n\t}\n\n\treturn str;\n}\n\n/**\n * @param {HTMLElement} element\n * @returns {{}}\n */\nexport function get_custom_elements_slots(element) {\n\tconst result = {};\n\telement.childNodes.forEach(\n\t\t/** @param {Element} node */ (node) => {\n\t\t\tresult[node.slot || 'default'] = true;\n\t\t}\n\t);\n\treturn result;\n}\n\nexport function construct_svelte_component(component, props) {\n\treturn new component(props);\n}\n\n/**\n * @typedef {Node & {\n * \tclaim_order?: number;\n * \thydrate_init?: true;\n * \tactual_end_child?: NodeEx;\n * \tchildNodes: NodeListOf<NodeEx>;\n * }} NodeEx\n */\n\n/** @typedef {ChildNode & NodeEx} ChildNodeEx */\n\n/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */\n\n/**\n * @typedef {ChildNodeEx[] & {\n * \tclaim_info?: {\n * \t\tlast_index: number;\n * \t\ttotal_claimed: number;\n * \t};\n * }} ChildNodeArray\n */\n","import { custom_event } from './dom.js';\n\nexport let current_component;\n\n/** @returns {void} */\nexport function set_current_component(component) {\n\tcurrent_component = component;\n}\n\nexport function get_current_component() {\n\tif (!current_component) throw new Error('Function called outside component initialization');\n\treturn current_component;\n}\n\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#beforeupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function beforeUpdate(fn) {\n\tget_current_component().$$.before_update.push(fn);\n}\n\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs/svelte#onmount\n * @template T\n * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn\n * @returns {void}\n */\nexport function onMount(fn) {\n\tget_current_component().$$.on_mount.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#afterupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function afterUpdate(fn) {\n\tget_current_component().$$.after_update.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs/svelte#ondestroy\n * @param {() => any} fn\n * @returns {void}\n */\nexport function onDestroy(fn) {\n\tget_current_component().$$.on_destroy.push(fn);\n}\n\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n * ```ts\n * const dispatch = createEventDispatcher<{\n *  loaded: never; // does not take a detail argument\n *  change: string; // takes a detail argument of type string, which is required\n *  optional: number | null; // takes an optional detail argument of type number\n * }>();\n * ```\n *\n * https://svelte.dev/docs/svelte#createeventdispatcher\n * @template {Record<string, any>} [EventMap=any]\n * @returns {import('./public.js').EventDispatcher<EventMap>}\n */\nexport function createEventDispatcher() {\n\tconst component = get_current_component();\n\treturn (type, detail, { cancelable = false } = {}) => {\n\t\tconst callbacks = component.$$.callbacks[type];\n\t\tif (callbacks) {\n\t\t\t// TODO are there situations where events could be dispatched\n\t\t\t// in a server (non-DOM) environment?\n\t\t\tconst event = custom_event(/** @type {string} */ (type), detail, { cancelable });\n\t\t\tcallbacks.slice().forEach((fn) => {\n\t\t\t\tfn.call(component, event);\n\t\t\t});\n\t\t\treturn !event.defaultPrevented;\n\t\t}\n\t\treturn true;\n\t};\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#setcontext\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tget_current_component().$$.context.set(key, context);\n\treturn context;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#getcontext\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\treturn get_current_component().$$.context.get(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs/svelte#getallcontexts\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\treturn get_current_component().$$.context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#hascontext\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\treturn get_current_component().$$.context.has(key);\n}\n\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\n/**\n * @param component\n * @param event\n * @returns {void}\n */\nexport function bubble(component, event) {\n\tconst callbacks = component.$$.callbacks[event.type];\n\tif (callbacks) {\n\t\t// @ts-ignore\n\t\tcallbacks.slice().forEach((fn) => fn.call(this, event));\n\t}\n}\n","import { run_all } from './utils.js';\nimport { current_component, set_current_component } from './lifecycle.js';\n\nexport const dirty_components = [];\nexport const intros = { enabled: false };\nexport const binding_callbacks = [];\n\nlet render_callbacks = [];\n\nconst flush_callbacks = [];\n\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\n\nlet update_scheduled = false;\n\n/** @returns {void} */\nexport function schedule_update() {\n\tif (!update_scheduled) {\n\t\tupdate_scheduled = true;\n\t\tresolved_promise.then(flush);\n\t}\n}\n\n/** @returns {Promise<void>} */\nexport function tick() {\n\tschedule_update();\n\treturn resolved_promise;\n}\n\n/** @returns {void} */\nexport function add_render_callback(fn) {\n\trender_callbacks.push(fn);\n}\n\n/** @returns {void} */\nexport function add_flush_callback(fn) {\n\tflush_callbacks.push(fn);\n}\n\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\n\nlet flushidx = 0; // Do *not* move this inside the flush() function\n\n/** @returns {void} */\nexport function flush() {\n\t// Do not reenter flush while dirty components are updated, as this can\n\t// result in an infinite loop. Instead, let the inner flush handle it.\n\t// Reentrancy is ok afterwards for bindings etc.\n\tif (flushidx !== 0) {\n\t\treturn;\n\t}\n\tconst saved_component = current_component;\n\tdo {\n\t\t// first, call beforeUpdate functions\n\t\t// and update components\n\t\ttry {\n\t\t\twhile (flushidx < dirty_components.length) {\n\t\t\t\tconst component = dirty_components[flushidx];\n\t\t\t\tflushidx++;\n\t\t\t\tset_current_component(component);\n\t\t\t\tupdate(component.$$);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// reset dirty state to not end up in a deadlocked state and then rethrow\n\t\t\tdirty_components.length = 0;\n\t\t\tflushidx = 0;\n\t\t\tthrow e;\n\t\t}\n\t\tset_current_component(null);\n\t\tdirty_components.length = 0;\n\t\tflushidx = 0;\n\t\twhile (binding_callbacks.length) binding_callbacks.pop()();\n\t\t// then, once components are updated, call\n\t\t// afterUpdate functions. This may cause\n\t\t// subsequent updates...\n\t\tfor (let i = 0; i < render_callbacks.length; i += 1) {\n\t\t\tconst callback = render_callbacks[i];\n\t\t\tif (!seen_callbacks.has(callback)) {\n\t\t\t\t// ...so guard against infinite loops\n\t\t\t\tseen_callbacks.add(callback);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\trender_callbacks.length = 0;\n\t} while (dirty_components.length);\n\twhile (flush_callbacks.length) {\n\t\tflush_callbacks.pop()();\n\t}\n\tupdate_scheduled = false;\n\tseen_callbacks.clear();\n\tset_current_component(saved_component);\n}\n\n/** @returns {void} */\nfunction update($$) {\n\tif ($$.fragment !== null) {\n\t\t$$.update();\n\t\trun_all($$.before_update);\n\t\tconst dirty = $$.dirty;\n\t\t$$.dirty = [-1];\n\t\t$$.fragment && $$.fragment.p($$.ctx, dirty);\n\t\t$$.after_update.forEach(add_render_callback);\n\t}\n}\n\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function flush_render_callbacks(fns) {\n\tconst filtered = [];\n\tconst targets = [];\n\trender_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));\n\ttargets.forEach((c) => c());\n\trender_callbacks = filtered;\n}\n","import { identity as linear, is_function, noop, run_all } from './utils.js';\nimport { now } from './environment.js';\nimport { loop } from './loop.js';\nimport { create_rule, delete_rule } from './style_manager.js';\nimport { custom_event } from './dom.js';\nimport { add_render_callback } from './scheduler.js';\n\n/**\n * @type {Promise<void> | null}\n */\nlet promise;\n\n/**\n * @returns {Promise<void>}\n */\nfunction wait() {\n\tif (!promise) {\n\t\tpromise = Promise.resolve();\n\t\tpromise.then(() => {\n\t\t\tpromise = null;\n\t\t});\n\t}\n\treturn promise;\n}\n\n/**\n * @param {Element} node\n * @param {INTRO | OUTRO | boolean} direction\n * @param {'start' | 'end'} kind\n * @returns {void}\n */\nfunction dispatch(node, direction, kind) {\n\tnode.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\n\nconst outroing = new Set();\n\n/**\n * @type {Outro}\n */\nlet outros;\n\n/**\n * @returns {void} */\nexport function group_outros() {\n\toutros = {\n\t\tr: 0,\n\t\tc: [],\n\t\tp: outros // parent group\n\t};\n}\n\n/**\n * @returns {void} */\nexport function check_outros() {\n\tif (!outros.r) {\n\t\trun_all(outros.c);\n\t}\n\toutros = outros.p;\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} [local]\n * @returns {void}\n */\nexport function transition_in(block, local) {\n\tif (block && block.i) {\n\t\toutroing.delete(block);\n\t\tblock.i(local);\n\t}\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} local\n * @param {0 | 1} [detach]\n * @param {() => void} [callback]\n * @returns {void}\n */\nexport function transition_out(block, local, detach, callback) {\n\tif (block && block.o) {\n\t\tif (outroing.has(block)) return;\n\t\toutroing.add(block);\n\t\toutros.c.push(() => {\n\t\t\toutroing.delete(block);\n\t\t\tif (callback) {\n\t\t\t\tif (detach) block.d(1);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\tblock.o(local);\n\t} else if (callback) {\n\t\tcallback();\n\t}\n}\n\n/**\n * @type {import('../transition/public.js').TransitionConfig}\n */\nconst null_transition = { duration: 0 };\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ start(): void; invalidate(): void; end(): void; }}\n */\nexport function create_in_transition(node, fn, params) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'in' };\n\tlet config = fn(node, params, options);\n\tlet running = false;\n\tlet animation_name;\n\tlet task;\n\tlet uid = 0;\n\n\t/**\n\t * @returns {void} */\n\tfunction cleanup() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\t\tif (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n\t\ttick(0, 1);\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tif (task) task.abort();\n\t\trunning = true;\n\t\tadd_render_callback(() => dispatch(node, true, 'start'));\n\t\ttask = loop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(1, 0);\n\t\t\t\t\tdispatch(node, true, 'end');\n\t\t\t\t\tcleanup();\n\t\t\t\t\treturn (running = false);\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\tlet started = false;\n\treturn {\n\t\tstart() {\n\t\t\tif (started) return;\n\t\t\tstarted = true;\n\t\t\tdelete_rule(node);\n\t\t\tif (is_function(config)) {\n\t\t\t\tconfig = config(options);\n\t\t\t\twait().then(go);\n\t\t\t} else {\n\t\t\t\tgo();\n\t\t\t}\n\t\t},\n\t\tinvalidate() {\n\t\t\tstarted = false;\n\t\t},\n\t\tend() {\n\t\t\tif (running) {\n\t\t\t\tcleanup();\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ end(reset: any): void; }}\n */\nexport function create_out_transition(node, fn, params) {\n\t/** @type {TransitionOptions} */\n\tconst options = { direction: 'out' };\n\tlet config = fn(node, params, options);\n\tlet running = true;\n\tlet animation_name;\n\tconst group = outros;\n\tgroup.r += 1;\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\tif (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tadd_render_callback(() => dispatch(node, false, 'start'));\n\n\t\tif ('inert' in node) {\n\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\tnode.inert = true;\n\t\t}\n\n\t\tloop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(0, 1);\n\t\t\t\t\tdispatch(node, false, 'end');\n\t\t\t\t\tif (!--group.r) {\n\t\t\t\t\t\t// this will result in `end()` being called,\n\t\t\t\t\t\t// so we don't need to clean up here\n\t\t\t\t\t\trun_all(group.c);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(1 - t, t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\n\tif (is_function(config)) {\n\t\twait().then(() => {\n\t\t\t// @ts-ignore\n\t\t\tconfig = config(options);\n\t\t\tgo();\n\t\t});\n\t} else {\n\t\tgo();\n\t}\n\n\treturn {\n\t\tend(reset) {\n\t\t\tif (reset && 'inert' in node) {\n\t\t\t\tnode.inert = original_inert_value;\n\t\t\t}\n\t\t\tif (reset && config.tick) {\n\t\t\t\tconfig.tick(1, 0);\n\t\t\t}\n\t\t\tif (running) {\n\t\t\t\tif (animation_name) delete_rule(node, animation_name);\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @param {boolean} intro\n * @returns {{ run(b: 0 | 1): void; end(): void; }}\n */\nexport function create_bidirectional_transition(node, fn, params, intro) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'both' };\n\tlet config = fn(node, params, options);\n\tlet t = intro ? 0 : 1;\n\n\t/**\n\t * @type {Program | null} */\n\tlet running_program = null;\n\n\t/**\n\t * @type {PendingProgram | null} */\n\tlet pending_program = null;\n\tlet animation_name = null;\n\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction clear_animation() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @param {PendingProgram} program\n\t * @param {number} duration\n\t * @returns {Program}\n\t */\n\tfunction init(program, duration) {\n\t\tconst d = /** @type {Program['d']} */ (program.b - t);\n\t\tduration *= Math.abs(d);\n\t\treturn {\n\t\t\ta: t,\n\t\t\tb: program.b,\n\t\t\td,\n\t\t\tduration,\n\t\t\tstart: program.start,\n\t\t\tend: program.start + duration,\n\t\t\tgroup: program.group\n\t\t};\n\t}\n\n\t/**\n\t * @param {INTRO | OUTRO} b\n\t * @returns {void}\n\t */\n\tfunction go(b) {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\t/**\n\t\t * @type {PendingProgram} */\n\t\tconst program = {\n\t\t\tstart: now() + delay,\n\t\t\tb\n\t\t};\n\n\t\tif (!b) {\n\t\t\t// @ts-ignore todo: improve typings\n\t\t\tprogram.group = outros;\n\t\t\toutros.r += 1;\n\t\t}\n\n\t\tif ('inert' in node) {\n\t\t\tif (b) {\n\t\t\t\tif (original_inert_value !== undefined) {\n\t\t\t\t\t// aborted/reversed outro — restore previous inert value\n\t\t\t\t\tnode.inert = original_inert_value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\t\tnode.inert = true;\n\t\t\t}\n\t\t}\n\n\t\tif (running_program || pending_program) {\n\t\t\tpending_program = program;\n\t\t} else {\n\t\t\t// if this is an intro, and there's a delay, we need to do\n\t\t\t// an initial tick and/or apply CSS animation immediately\n\t\t\tif (css) {\n\t\t\t\tclear_animation();\n\t\t\t\tanimation_name = create_rule(node, t, b, duration, delay, easing, css);\n\t\t\t}\n\t\t\tif (b) tick(0, 1);\n\t\t\trunning_program = init(program, duration);\n\t\t\tadd_render_callback(() => dispatch(node, b, 'start'));\n\t\t\tloop((now) => {\n\t\t\t\tif (pending_program && now > pending_program.start) {\n\t\t\t\t\trunning_program = init(pending_program, duration);\n\t\t\t\t\tpending_program = null;\n\t\t\t\t\tdispatch(node, running_program.b, 'start');\n\t\t\t\t\tif (css) {\n\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\tanimation_name = create_rule(\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\trunning_program.b,\n\t\t\t\t\t\t\trunning_program.duration,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\teasing,\n\t\t\t\t\t\t\tconfig.css\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (running_program) {\n\t\t\t\t\tif (now >= running_program.end) {\n\t\t\t\t\t\ttick((t = running_program.b), 1 - t);\n\t\t\t\t\t\tdispatch(node, running_program.b, 'end');\n\t\t\t\t\t\tif (!pending_program) {\n\t\t\t\t\t\t\t// we're done\n\t\t\t\t\t\t\tif (running_program.b) {\n\t\t\t\t\t\t\t\t// intro — we can tidy up immediately\n\t\t\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// outro — needs to be coordinated\n\t\t\t\t\t\t\t\tif (!--running_program.group.r) run_all(running_program.group.c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trunning_program = null;\n\t\t\t\t\t} else if (now >= running_program.start) {\n\t\t\t\t\t\tconst p = now - running_program.start;\n\t\t\t\t\t\tt = running_program.a + running_program.d * easing(p / running_program.duration);\n\t\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !!(running_program || pending_program);\n\t\t\t});\n\t\t}\n\t}\n\treturn {\n\t\trun(b) {\n\t\t\tif (is_function(config)) {\n\t\t\t\twait().then(() => {\n\t\t\t\t\tconst opts = { direction: b ? 'in' : 'out' };\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconfig = config(opts);\n\t\t\t\t\tgo(b);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgo(b);\n\t\t\t}\n\t\t},\n\t\tend() {\n\t\t\tclear_animation();\n\t\t\trunning_program = pending_program = null;\n\t\t}\n\t};\n}\n\n/** @typedef {1} INTRO */\n/** @typedef {0} OUTRO */\n/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */\n/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */\n\n/**\n * @typedef {Object} Outro\n * @property {number} r\n * @property {Function[]} c\n * @property {Object} p\n */\n\n/**\n * @typedef {Object} PendingProgram\n * @property {number} start\n * @property {INTRO|OUTRO} b\n * @property {Outro} [group]\n */\n\n/**\n * @typedef {Object} Program\n * @property {number} a\n * @property {INTRO|OUTRO} b\n * @property {1|-1} d\n * @property {number} duration\n * @property {number} start\n * @property {number} end\n * @property {Outro} [group]\n */\n","import { transition_in, transition_out } from './transitions.js';\nimport { run_all } from './utils.js';\n\n// general each functions:\n\nexport function ensure_array_like(array_like_or_iterator) {\n\treturn array_like_or_iterator?.length !== undefined\n\t\t? array_like_or_iterator\n\t\t: Array.from(array_like_or_iterator);\n}\n\n// keyed each functions:\n\n/** @returns {void} */\nexport function destroy_block(block, lookup) {\n\tblock.d(1);\n\tlookup.delete(block.key);\n}\n\n/** @returns {void} */\nexport function outro_and_destroy_block(block, lookup) {\n\ttransition_out(block, 1, 1, () => {\n\t\tlookup.delete(block.key);\n\t});\n}\n\n/** @returns {void} */\nexport function fix_and_destroy_block(block, lookup) {\n\tblock.f();\n\tdestroy_block(block, lookup);\n}\n\n/** @returns {void} */\nexport function fix_and_outro_and_destroy_block(block, lookup) {\n\tblock.f();\n\toutro_and_destroy_block(block, lookup);\n}\n\n/** @returns {any[]} */\nexport function update_keyed_each(\n\told_blocks,\n\tdirty,\n\tget_key,\n\tdynamic,\n\tctx,\n\tlist,\n\tlookup,\n\tnode,\n\tdestroy,\n\tcreate_each_block,\n\tnext,\n\tget_context\n) {\n\tlet o = old_blocks.length;\n\tlet n = list.length;\n\tlet i = o;\n\tconst old_indexes = {};\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\n\tconst new_blocks = [];\n\tconst new_lookup = new Map();\n\tconst deltas = new Map();\n\tconst updates = [];\n\ti = n;\n\twhile (i--) {\n\t\tconst child_ctx = get_context(ctx, list, i);\n\t\tconst key = get_key(child_ctx);\n\t\tlet block = lookup.get(key);\n\t\tif (!block) {\n\t\t\tblock = create_each_block(key, child_ctx);\n\t\t\tblock.c();\n\t\t} else if (dynamic) {\n\t\t\t// defer updates until all the DOM shuffling is done\n\t\t\tupdates.push(() => block.p(child_ctx, dirty));\n\t\t}\n\t\tnew_lookup.set(key, (new_blocks[i] = block));\n\t\tif (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));\n\t}\n\tconst will_move = new Set();\n\tconst did_move = new Set();\n\t/** @returns {void} */\n\tfunction insert(block) {\n\t\ttransition_in(block, 1);\n\t\tblock.m(node, next);\n\t\tlookup.set(block.key, block);\n\t\tnext = block.first;\n\t\tn--;\n\t}\n\twhile (o && n) {\n\t\tconst new_block = new_blocks[n - 1];\n\t\tconst old_block = old_blocks[o - 1];\n\t\tconst new_key = new_block.key;\n\t\tconst old_key = old_block.key;\n\t\tif (new_block === old_block) {\n\t\t\t// do nothing\n\t\t\tnext = new_block.first;\n\t\t\to--;\n\t\t\tn--;\n\t\t} else if (!new_lookup.has(old_key)) {\n\t\t\t// remove old block\n\t\t\tdestroy(old_block, lookup);\n\t\t\to--;\n\t\t} else if (!lookup.has(new_key) || will_move.has(new_key)) {\n\t\t\tinsert(new_block);\n\t\t} else if (did_move.has(old_key)) {\n\t\t\to--;\n\t\t} else if (deltas.get(new_key) > deltas.get(old_key)) {\n\t\t\tdid_move.add(new_key);\n\t\t\tinsert(new_block);\n\t\t} else {\n\t\t\twill_move.add(old_key);\n\t\t\to--;\n\t\t}\n\t}\n\twhile (o--) {\n\t\tconst old_block = old_blocks[o];\n\t\tif (!new_lookup.has(old_block.key)) destroy(old_block, lookup);\n\t}\n\twhile (n) insert(new_blocks[n - 1]);\n\trun_all(updates);\n\treturn new_blocks;\n}\n\n/** @returns {void} */\nexport function validate_each_keys(ctx, list, get_context, get_key) {\n\tconst keys = new Map();\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst key = get_key(get_context(ctx, list, i));\n\t\tif (keys.has(key)) {\n\t\t\tlet value = '';\n\t\t\ttry {\n\t\t\t\tvalue = `with value '${String(key)}' `;\n\t\t\t} catch (e) {\n\t\t\t\t// can't stringify\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(\n\t\t\t\t\tkey\n\t\t\t\t)} and ${i} ${value}are duplicates`\n\t\t\t);\n\t\t}\n\t\tkeys.set(key, i);\n\t}\n}\n","import {\n\tadd_render_callback,\n\tflush,\n\tflush_render_callbacks,\n\tschedule_update,\n\tdirty_components\n} from './scheduler.js';\nimport { current_component, set_current_component } from './lifecycle.js';\nimport { blank_object, is_empty, is_function, run, run_all, noop } from './utils.js';\nimport {\n\tchildren,\n\tdetach,\n\tstart_hydrating,\n\tend_hydrating,\n\tget_custom_elements_slots,\n\tinsert,\n\telement,\n\tattr\n} from './dom.js';\nimport { transition_in } from './transitions.js';\n\n/** @returns {void} */\nexport function bind(component, name, callback) {\n\tconst index = component.$$.props[name];\n\tif (index !== undefined) {\n\t\tcomponent.$$.bound[index] = callback;\n\t\tcallback(component.$$.ctx[index]);\n\t}\n}\n\n/** @returns {void} */\nexport function create_component(block) {\n\tblock && block.c();\n}\n\n/** @returns {void} */\nexport function claim_component(block, parent_nodes) {\n\tblock && block.l(parent_nodes);\n}\n\n/** @returns {void} */\nexport function mount_component(component, target, anchor) {\n\tconst { fragment, after_update } = component.$$;\n\tfragment && fragment.m(target, anchor);\n\t// onMount happens before the initial afterUpdate\n\tadd_render_callback(() => {\n\t\tconst new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n\t\t// if the component was destroyed immediately\n\t\t// it will update the `$$.on_destroy` reference to `null`.\n\t\t// the destructured on_destroy may still reference to the old array\n\t\tif (component.$$.on_destroy) {\n\t\t\tcomponent.$$.on_destroy.push(...new_on_destroy);\n\t\t} else {\n\t\t\t// Edge case - component was destroyed immediately,\n\t\t\t// most likely as a result of a binding initialising\n\t\t\trun_all(new_on_destroy);\n\t\t}\n\t\tcomponent.$$.on_mount = [];\n\t});\n\tafter_update.forEach(add_render_callback);\n}\n\n/** @returns {void} */\nexport function destroy_component(component, detaching) {\n\tconst $$ = component.$$;\n\tif ($$.fragment !== null) {\n\t\tflush_render_callbacks($$.after_update);\n\t\trun_all($$.on_destroy);\n\t\t$$.fragment && $$.fragment.d(detaching);\n\t\t// TODO null out other refs, including component.$$ (but need to\n\t\t// preserve final state?)\n\t\t$$.on_destroy = $$.fragment = null;\n\t\t$$.ctx = [];\n\t}\n}\n\n/** @returns {void} */\nfunction make_dirty(component, i) {\n\tif (component.$$.dirty[0] === -1) {\n\t\tdirty_components.push(component);\n\t\tschedule_update();\n\t\tcomponent.$$.dirty.fill(0);\n\t}\n\tcomponent.$$.dirty[(i / 31) | 0] |= 1 << i % 31;\n}\n\n// TODO: Document the other params\n/**\n * @param {SvelteComponent} component\n * @param {import('./public.js').ComponentConstructorOptions} options\n *\n * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.\n * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.\n * This will be the `add_css` function from the compiled component.\n *\n * @returns {void}\n */\nexport function init(\n\tcomponent,\n\toptions,\n\tinstance,\n\tcreate_fragment,\n\tnot_equal,\n\tprops,\n\tappend_styles = null,\n\tdirty = [-1]\n) {\n\tconst parent_component = current_component;\n\tset_current_component(component);\n\t/** @type {import('./private.js').T$$} */\n\tconst $$ = (component.$$ = {\n\t\tfragment: null,\n\t\tctx: [],\n\t\t// state\n\t\tprops,\n\t\tupdate: noop,\n\t\tnot_equal,\n\t\tbound: blank_object(),\n\t\t// lifecycle\n\t\ton_mount: [],\n\t\ton_destroy: [],\n\t\ton_disconnect: [],\n\t\tbefore_update: [],\n\t\tafter_update: [],\n\t\tcontext: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n\t\t// everything else\n\t\tcallbacks: blank_object(),\n\t\tdirty,\n\t\tskip_bound: false,\n\t\troot: options.target || parent_component.$$.root\n\t});\n\tappend_styles && append_styles($$.root);\n\tlet ready = false;\n\t$$.ctx = instance\n\t\t? instance(component, options.props || {}, (i, ret, ...rest) => {\n\t\t\t\tconst value = rest.length ? rest[0] : ret;\n\t\t\t\tif ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {\n\t\t\t\t\tif (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);\n\t\t\t\t\tif (ready) make_dirty(component, i);\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t  })\n\t\t: [];\n\t$$.update();\n\tready = true;\n\trun_all($$.before_update);\n\t// `false` as a special case of no DOM component\n\t$$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n\tif (options.target) {\n\t\tif (options.hydrate) {\n\t\t\tstart_hydrating();\n\t\t\t// TODO: what is the correct type here?\n\t\t\t// @ts-expect-error\n\t\t\tconst nodes = children(options.target);\n\t\t\t$$.fragment && $$.fragment.l(nodes);\n\t\t\tnodes.forEach(detach);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t$$.fragment && $$.fragment.c();\n\t\t}\n\t\tif (options.intro) transition_in(component.$$.fragment);\n\t\tmount_component(component, options.target, options.anchor);\n\t\tend_hydrating();\n\t\tflush();\n\t}\n\tset_current_component(parent_component);\n}\n\nexport let SvelteElement;\n\nif (typeof HTMLElement === 'function') {\n\tSvelteElement = class extends HTMLElement {\n\t\t/** The Svelte component constructor */\n\t\t$$ctor;\n\t\t/** Slots */\n\t\t$$s;\n\t\t/** The Svelte component instance */\n\t\t$$c;\n\t\t/** Whether or not the custom element is connected */\n\t\t$$cn = false;\n\t\t/** Component props data */\n\t\t$$d = {};\n\t\t/** `true` if currently in the process of reflecting component props back to attributes */\n\t\t$$r = false;\n\t\t/** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */\n\t\t$$p_d = {};\n\t\t/** @type {Record<string, Function[]>} Event listeners */\n\t\t$$l = {};\n\t\t/** @type {Map<Function, Function>} Event listener unsubscribe functions */\n\t\t$$l_u = new Map();\n\n\t\tconstructor($$componentCtor, $$slots, use_shadow_dom) {\n\t\t\tsuper();\n\t\t\tthis.$$ctor = $$componentCtor;\n\t\t\tthis.$$s = $$slots;\n\t\t\tif (use_shadow_dom) {\n\t\t\t\tthis.attachShadow({ mode: 'open' });\n\t\t\t}\n\t\t}\n\n\t\taddEventListener(type, listener, options) {\n\t\t\t// We can't determine upfront if the event is a custom event or not, so we have to\n\t\t\t// listen to both. If someone uses a custom event with the same name as a regular\n\t\t\t// browser event, this fires twice - we can't avoid that.\n\t\t\tthis.$$l[type] = this.$$l[type] || [];\n\t\t\tthis.$$l[type].push(listener);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t}\n\t\t\tsuper.addEventListener(type, listener, options);\n\t\t}\n\n\t\tremoveEventListener(type, listener, options) {\n\t\t\tsuper.removeEventListener(type, listener, options);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$l_u.get(listener);\n\t\t\t\tif (unsub) {\n\t\t\t\t\tunsub();\n\t\t\t\t\tthis.$$l_u.delete(listener);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tasync connectedCallback() {\n\t\t\tthis.$$cn = true;\n\t\t\tif (!this.$$c) {\n\t\t\t\t// We wait one tick to let possible child slot elements be created/mounted\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tif (!this.$$cn) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfunction create_slot(name) {\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tlet node;\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\tc: function create() {\n\t\t\t\t\t\t\t\tnode = element('slot');\n\t\t\t\t\t\t\t\tif (name !== 'default') {\n\t\t\t\t\t\t\t\t\tattr(node, 'name', name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {HTMLElement} target\n\t\t\t\t\t\t\t * @param {HTMLElement} [anchor]\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tm: function mount(target, anchor) {\n\t\t\t\t\t\t\t\tinsert(target, node, anchor);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\td: function destroy(detaching) {\n\t\t\t\t\t\t\t\tif (detaching) {\n\t\t\t\t\t\t\t\t\tdetach(node);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn obj;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst $$slots = {};\n\t\t\t\tconst existing_slots = get_custom_elements_slots(this);\n\t\t\t\tfor (const name of this.$$s) {\n\t\t\t\t\tif (name in existing_slots) {\n\t\t\t\t\t\t$$slots[name] = [create_slot(name)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const attribute of this.attributes) {\n\t\t\t\t\t// this.$$data takes precedence over this.attributes\n\t\t\t\t\tconst name = this.$$g_p(attribute.name);\n\t\t\t\t\tif (!(name in this.$$d)) {\n\t\t\t\t\t\tthis.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, 'toProp');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Port over props that were set programmatically before ce was initialized\n\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\tif (!(key in this.$$d) && this[key] !== undefined) {\n\t\t\t\t\t\tthis.$$d[key] = this[key]; // don't transform, these were set through JavaScript\n\t\t\t\t\t\tdelete this[key]; // remove the property that shadows the getter/setter\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$c = new this.$$ctor({\n\t\t\t\t\ttarget: this.shadowRoot || this,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...this.$$d,\n\t\t\t\t\t\t$$slots,\n\t\t\t\t\t\t$$scope: {\n\t\t\t\t\t\t\tctx: []\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Reflect component props as attributes\n\t\t\t\tconst reflect_attributes = () => {\n\t\t\t\t\tthis.$$r = true;\n\t\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\t\tthis.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];\n\t\t\t\t\t\tif (this.$$p_d[key].reflect) {\n\t\t\t\t\t\t\tconst attribute_value = get_custom_element_value(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tthis.$$d[key],\n\t\t\t\t\t\t\t\tthis.$$p_d,\n\t\t\t\t\t\t\t\t'toAttribute'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (attribute_value == null) {\n\t\t\t\t\t\t\t\tthis.removeAttribute(this.$$p_d[key].attribute || key);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.setAttribute(this.$$p_d[key].attribute || key, attribute_value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.$$r = false;\n\t\t\t\t};\n\t\t\t\tthis.$$c.$$.after_update.push(reflect_attributes);\n\t\t\t\treflect_attributes(); // once initially because after_update is added too late for first render\n\n\t\t\t\tfor (const type in this.$$l) {\n\t\t\t\t\tfor (const listener of this.$$l[type]) {\n\t\t\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$l = {};\n\t\t\t}\n\t\t}\n\n\t\t// We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte\n\t\t// and setting attributes through setAttribute etc, this is helpful\n\t\tattributeChangedCallback(attr, _oldValue, newValue) {\n\t\t\tif (this.$$r) return;\n\t\t\tattr = this.$$g_p(attr);\n\t\t\tthis.$$d[attr] = get_custom_element_value(attr, newValue, this.$$p_d, 'toProp');\n\t\t\tthis.$$c?.$set({ [attr]: this.$$d[attr] });\n\t\t}\n\n\t\tdisconnectedCallback() {\n\t\t\tthis.$$cn = false;\n\t\t\t// In a microtask, because this could be a move within the DOM\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tif (!this.$$cn) {\n\t\t\t\t\tthis.$$c.$destroy();\n\t\t\t\t\tthis.$$c = undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t$$g_p(attribute_name) {\n\t\t\treturn (\n\t\t\t\tObject.keys(this.$$p_d).find(\n\t\t\t\t\t(key) =>\n\t\t\t\t\t\tthis.$$p_d[key].attribute === attribute_name ||\n\t\t\t\t\t\t(!this.$$p_d[key].attribute && key.toLowerCase() === attribute_name)\n\t\t\t\t) || attribute_name\n\t\t\t);\n\t\t}\n\t};\n}\n\n/**\n * @param {string} prop\n * @param {any} value\n * @param {Record<string, CustomElementPropDefinition>} props_definition\n * @param {'toAttribute' | 'toProp'} [transform]\n */\nfunction get_custom_element_value(prop, value, props_definition, transform) {\n\tconst type = props_definition[prop]?.type;\n\tvalue = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;\n\tif (!transform || !props_definition[prop]) {\n\t\treturn value;\n\t} else if (transform === 'toAttribute') {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value == null ? null : JSON.stringify(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value ? '' : null;\n\t\t\tcase 'Number':\n\t\t\t\treturn value == null ? null : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t} else {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value && JSON.parse(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value; // conversion already handled above\n\t\t\tcase 'Number':\n\t\t\t\treturn value != null ? +value : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n}\n\n/**\n * @internal\n *\n * Turn a Svelte component into a custom element.\n * @param {import('./public.js').ComponentType} Component  A Svelte component constructor\n * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe\n * @param {string[]} slots  The slots to create\n * @param {string[]} accessors  Other accessors besides the ones for props the component has\n * @param {boolean} use_shadow_dom  Whether to use shadow DOM\n * @param {(ce: new () => HTMLElement) => new () => HTMLElement} [extend]\n */\nexport function create_custom_element(\n\tComponent,\n\tprops_definition,\n\tslots,\n\taccessors,\n\tuse_shadow_dom,\n\textend\n) {\n\tlet Class = class extends SvelteElement {\n\t\tconstructor() {\n\t\t\tsuper(Component, slots, use_shadow_dom);\n\t\t\tthis.$$p_d = props_definition;\n\t\t}\n\t\tstatic get observedAttributes() {\n\t\t\treturn Object.keys(props_definition).map((key) =>\n\t\t\t\t(props_definition[key].attribute || key).toLowerCase()\n\t\t\t);\n\t\t}\n\t};\n\tObject.keys(props_definition).forEach((prop) => {\n\t\tObject.defineProperty(Class.prototype, prop, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tvalue = get_custom_element_value(prop, value, props_definition);\n\t\t\t\tthis.$$d[prop] = value;\n\t\t\t\tthis.$$c?.$set({ [prop]: value });\n\t\t\t}\n\t\t});\n\t});\n\taccessors.forEach((accessor) => {\n\t\tObject.defineProperty(Class.prototype, accessor, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c?.[accessor];\n\t\t\t}\n\t\t});\n\t});\n\tif (extend) {\n\t\t// @ts-expect-error - assigning here is fine\n\t\tClass = extend(Class);\n\t}\n\tComponent.element = /** @type {any} */ (Class);\n\treturn Class;\n}\n\n/**\n * Base class for Svelte components. Used when dev=false.\n *\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n */\nexport class SvelteComponent {\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$ = undefined;\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$set = undefined;\n\n\t/** @returns {void} */\n\t$destroy() {\n\t\tdestroy_component(this, 1);\n\t\tthis.$destroy = noop;\n\t}\n\n\t/**\n\t * @template {Extract<keyof Events, string>} K\n\t * @param {K} type\n\t * @param {((e: Events[K]) => void) | null | undefined} callback\n\t * @returns {() => void}\n\t */\n\t$on(type, callback) {\n\t\tif (!is_function(callback)) {\n\t\t\treturn noop;\n\t\t}\n\t\tconst callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\n\t\tcallbacks.push(callback);\n\t\treturn () => {\n\t\t\tconst index = callbacks.indexOf(callback);\n\t\t\tif (index !== -1) callbacks.splice(index, 1);\n\t\t};\n\t}\n\n\t/**\n\t * @param {Partial<Props>} props\n\t * @returns {void}\n\t */\n\t$set(props) {\n\t\tif (this.$$set && !is_empty(props)) {\n\t\t\tthis.$$.skip_bound = true;\n\t\t\tthis.$$set(props);\n\t\t\tthis.$$.skip_bound = false;\n\t\t}\n\t}\n}\n\n/**\n * @typedef {Object} CustomElementPropDefinition\n * @property {string} [attribute]\n * @property {boolean} [reflect]\n * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]\n */\n","// generated during release, do not modify\n\n/**\n * The current version, as set in package.json.\n *\n * https://svelte.dev/docs/svelte-compiler#svelte-version\n * @type {string}\n */\nexport const VERSION = '4.2.9';\nexport const PUBLIC_VERSION = '4';\n","import {\n\tcustom_event,\n\tappend,\n\tappend_hydration,\n\tinsert,\n\tinsert_hydration,\n\tdetach,\n\tlisten,\n\tattr\n} from './dom.js';\nimport { SvelteComponent } from './Component.js';\nimport { is_void } from '../../shared/utils/names.js';\nimport { VERSION } from '../../shared/version.js';\nimport { contenteditable_truthy_values } from './utils.js';\nimport { ensure_array_like } from './each.js';\n\n/**\n * @template T\n * @param {string} type\n * @param {T} [detail]\n * @returns {void}\n */\nexport function dispatch_dev(type, detail) {\n\tdocument.dispatchEvent(custom_event(type, { version: VERSION, ...detail }, { bubbles: true }));\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append_dev(target, node) {\n\tdispatch_dev('SvelteDOMInsert', { target, node });\n\tappend(target, node);\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append_hydration_dev(target, node) {\n\tdispatch_dev('SvelteDOMInsert', { target, node });\n\tappend_hydration(target, node);\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert_dev(target, node, anchor) {\n\tdispatch_dev('SvelteDOMInsert', { target, node, anchor });\n\tinsert(target, node, anchor);\n}\n\n/** @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert_hydration_dev(target, node, anchor) {\n\tdispatch_dev('SvelteDOMInsert', { target, node, anchor });\n\tinsert_hydration(target, node, anchor);\n}\n\n/**\n * @param {Node} node\n * @returns {void}\n */\nexport function detach_dev(node) {\n\tdispatch_dev('SvelteDOMRemove', { node });\n\tdetach(node);\n}\n\n/**\n * @param {Node} before\n * @param {Node} after\n * @returns {void}\n */\nexport function detach_between_dev(before, after) {\n\twhile (before.nextSibling && before.nextSibling !== after) {\n\t\tdetach_dev(before.nextSibling);\n\t}\n}\n\n/**\n * @param {Node} after\n * @returns {void}\n */\nexport function detach_before_dev(after) {\n\twhile (after.previousSibling) {\n\t\tdetach_dev(after.previousSibling);\n\t}\n}\n\n/**\n * @param {Node} before\n * @returns {void}\n */\nexport function detach_after_dev(before) {\n\twhile (before.nextSibling) {\n\t\tdetach_dev(before.nextSibling);\n\t}\n}\n\n/**\n * @param {Node} node\n * @param {string} event\n * @param {EventListenerOrEventListenerObject} handler\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\n * @param {boolean} [has_prevent_default]\n * @param {boolean} [has_stop_propagation]\n * @param {boolean} [has_stop_immediate_propagation]\n * @returns {() => void}\n */\nexport function listen_dev(\n\tnode,\n\tevent,\n\thandler,\n\toptions,\n\thas_prevent_default,\n\thas_stop_propagation,\n\thas_stop_immediate_propagation\n) {\n\tconst modifiers =\n\t\toptions === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n\tif (has_prevent_default) modifiers.push('preventDefault');\n\tif (has_stop_propagation) modifiers.push('stopPropagation');\n\tif (has_stop_immediate_propagation) modifiers.push('stopImmediatePropagation');\n\tdispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n\tconst dispose = listen(node, event, handler, options);\n\treturn () => {\n\t\tdispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n\t\tdispose();\n\t};\n}\n\n/**\n * @param {Element} node\n * @param {string} attribute\n * @param {string} [value]\n * @returns {void}\n */\nexport function attr_dev(node, attribute, value) {\n\tattr(node, attribute, value);\n\tif (value == null) dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n\telse dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\n\n/**\n * @param {Element} node\n * @param {string} property\n * @param {any} [value]\n * @returns {void}\n */\nexport function prop_dev(node, property, value) {\n\tnode[property] = value;\n\tdispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\n\n/**\n * @param {HTMLElement} node\n * @param {string} property\n * @param {any} [value]\n * @returns {void}\n */\nexport function dataset_dev(node, property, value) {\n\tnode.dataset[property] = value;\n\tdispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_dev(text, data) {\n\tdata = '' + data;\n\tif (text.data === data) return;\n\tdispatch_dev('SvelteDOMSetData', { node: text, data });\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_contenteditable_dev(text, data) {\n\tdata = '' + data;\n\tif (text.wholeText === data) return;\n\tdispatch_dev('SvelteDOMSetData', { node: text, data });\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @param {string} attr_value\n * @returns {void}\n */\nexport function set_data_maybe_contenteditable_dev(text, data, attr_value) {\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\n\t\tset_data_contenteditable_dev(text, data);\n\t} else {\n\t\tset_data_dev(text, data);\n\t}\n}\n\nexport function ensure_array_like_dev(arg) {\n\tif (\n\t\ttypeof arg !== 'string' &&\n\t\t!(arg && typeof arg === 'object' && 'length' in arg) &&\n\t\t!(typeof Symbol === 'function' && arg && Symbol.iterator in arg)\n\t) {\n\t\tthrow new Error('{#each} only works with iterable values.');\n\t}\n\treturn ensure_array_like(arg);\n}\n\n/**\n * @returns {void} */\nexport function validate_slots(name, slot, keys) {\n\tfor (const slot_key of Object.keys(slot)) {\n\t\tif (!~keys.indexOf(slot_key)) {\n\t\t\tconsole.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n\t\t}\n\t}\n}\n\n/**\n * @param {unknown} tag\n * @returns {void}\n */\nexport function validate_dynamic_element(tag) {\n\tconst is_string = typeof tag === 'string';\n\tif (tag && !is_string) {\n\t\tthrow new Error('<svelte:element> expects \"this\" attribute to be a string.');\n\t}\n}\n\n/**\n * @param {undefined | string} tag\n * @returns {void}\n */\nexport function validate_void_dynamic_element(tag) {\n\tif (tag && is_void(tag)) {\n\t\tconsole.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n\t}\n}\n\nexport function construct_svelte_component_dev(component, props) {\n\tconst error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n\ttry {\n\t\tconst instance = new component(props);\n\t\tif (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n\t\t\tthrow new Error(error_message);\n\t\t}\n\t\treturn instance;\n\t} catch (err) {\n\t\tconst { message } = err;\n\t\tif (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n\t\t\tthrow new Error(error_message);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n *\n * Can be used to create strongly typed Svelte components.\n *\n * #### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponent } from \"svelte\";\n * export class MyComponent extends SvelteComponent<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n * @template {Record<string, any>} [Slots=any]\n * @extends {SvelteComponent<Props, Events>}\n */\nexport class SvelteComponentDev extends SvelteComponent {\n\t/**\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t *\n\t * @type {Props}\n\t */\n\t$$prop_def;\n\t/**\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t *\n\t * @type {Events}\n\t */\n\t$$events_def;\n\t/**\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t *\n\t * @type {Slots}\n\t */\n\t$$slot_def;\n\n\t/** @param {import('./public.js').ComponentConstructorOptions<Props>} options */\n\tconstructor(options) {\n\t\tif (!options || (!options.target && !options.$$inline)) {\n\t\t\tthrow new Error(\"'target' is a required option\");\n\t\t}\n\t\tsuper();\n\t}\n\n\t/** @returns {void} */\n\t$destroy() {\n\t\tsuper.$destroy();\n\t\tthis.$destroy = () => {\n\t\t\tconsole.warn('Component was already destroyed'); // eslint-disable-line no-console\n\t\t};\n\t}\n\n\t/** @returns {void} */\n\t$capture_state() {}\n\n\t/** @returns {void} */\n\t$inject_state() {}\n}\n/**\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n * @template {Record<string, any>} [Slots=any]\n * @deprecated Use `SvelteComponent` instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512\n * @extends {SvelteComponentDev<Props, Events, Slots>}\n */\nexport class SvelteComponentTyped extends SvelteComponentDev {}\n\n/** @returns {() => void} */\nexport function loop_guard(timeout) {\n\tconst start = Date.now();\n\treturn () => {\n\t\tif (Date.now() - start > timeout) {\n\t\t\tthrow new Error('Infinite loop detected');\n\t\t}\n\t};\n}\n","import { PUBLIC_VERSION } from '../../../shared/version.js';\n\nif (typeof window !== 'undefined')\n\t// @ts-ignore\n\t(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);\n","<script lang=\"ts\">\n\tlet answer = '';\n\tlet prompt = '';\n\tlet code = '';\n    let selectedOption = '';\n\n    const options = [\n        \"Formatting\",\n        \"Efficiency\",\n        \"Security\",\n        \"Variable Naming\",\n        \"Explanation\"\n    ];\n\n    function resizeTextarea(event: Event) {\n       const target = event.target as HTMLTextAreaElement;\n        target.style.height = 'auto';\n        target.style.height = `${target.scrollHeight}px`;\n    }\n</script>\n\n<div>Custom Prompt:</div>\n\n<form\n\ton:submit|preventDefault={() => {\n\t\tanswer = 'AI generated result goes here';\n\t}}\n>\n\t<input bind:value={prompt} placeholder=\"Optional\" disabled={selectedOption != \"\"}/>\n</form>\n\n<div>Standard Prompt:</div>\n\n<select bind:value={selectedOption}>\n    <option value=\"\" selected>Use Custom Prompt</option>\n    {#each options as option}\n        <option value={option}>{option}</option>\n    {/each}\n</select>\n\n<div>Code:</div>\n\n<form\n\ton:submit|preventDefault={() => {\n\t\tanswer = 'AI generated result goes here';\n\t}}\n>\n\t<textarea bind:value={code} on:input={resizeTextarea} rows=\"1\" placeholder=\"Optional\"></textarea>\n</form>\n\n<div>Answer:</div>\n\n<button\n\ton:click={() => {\n\t\tanswer = 'AI generated answer goes here';\n\t}}>Generate</button\n>\n\n<div> {answer} </div>\n\n<style>\n    textarea {\n        width: 100%;\n        box-sizing: border-box; /* Ensures padding does not affect overall width */\n        overflow-y: hidden; /* Hides the scrollbar */\n        resize: none; /* Disables manual resizing */\n    }\n</style>\n","import App from \"../components/Sidebar.svelte\";\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;"],"names":["App"],"mappings":"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"}
>>>>>>> Stashed changes
